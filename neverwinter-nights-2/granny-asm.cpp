#include <cstdint>
#include <cstring>
#include <cstdlib>

uint32_t g0  __asm__(".D001") = 0;
uint32_t* g1 __asm__(".D002") = &g0;
uint32_t* g2 __asm__(".O001") = g1;

uint8_t compressed1[1593] = {
  0x00, 0xFF, 0xFF, 0x07, 0x43, 0x00, 0x38, 0x00, 0x07, 0x03, 0x07, 0x16, 0x00, 0xFF, 0xFF, 0x07,
  0x01, 0x00, 0x08, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0xFF, 0xFF, 0x07, 0x2C, 0x00, 0x18, 0x00,
  0x01, 0x01, 0x03, 0x11, 0x00, 0x00, 0x2E, 0x8A, 0x62, 0xD3, 0x14, 0x97, 0x58, 0xA0, 0x44, 0x77,
  0xC7, 0xB7, 0xAE, 0xC7, 0x58, 0x09, 0xD1, 0xAA, 0xF0, 0x4D, 0x83, 0x04, 0x51, 0xEA, 0x25, 0xFA,
  0xF5, 0xC7, 0x53, 0x13, 0x2D, 0x10, 0x49, 0x3A, 0xA4, 0xE7, 0xE4, 0x3B, 0x44, 0xEF, 0x00, 0xA5,
  0x59, 0x85, 0x0B, 0x53, 0xAF, 0xEF, 0x0E, 0xFE, 0x1B, 0x32, 0x57, 0x5C, 0x4F, 0xF9, 0xC6, 0x40,
  0xF5, 0xD0, 0x1D, 0xBB, 0x0C, 0x31, 0x3A, 0xC2, 0x16, 0x58, 0x56, 0xD7, 0x05, 0x6E, 0x9A, 0x39,
  0xF5, 0xA7, 0x8D, 0x5F, 0xC5, 0xB7, 0x82, 0xFF, 0x85, 0xA8, 0x7C, 0xFB, 0xCA, 0x04, 0x03, 0xEC,
  0xF3, 0xE8, 0x9F, 0xC7, 0xF2, 0x73, 0x2F, 0x34, 0x3F, 0x35, 0x56, 0xBC, 0xC3, 0x29, 0xFA, 0x88,
  0xA2, 0xE1, 0x12, 0xC3, 0xF6, 0xDA, 0x72, 0xF0, 0x76, 0x89, 0x2C, 0x30, 0xCC, 0x11, 0xBF, 0xF6,
  0x7D, 0x98, 0x49, 0xB5, 0x63, 0x42, 0xDC, 0xF0, 0x98, 0x59, 0x31, 0x41, 0x96, 0x2F, 0x85, 0x5F,
  0x8A, 0xFF, 0x1D, 0x0E, 0xB0, 0x65, 0xD3, 0x78, 0x0C, 0xD9, 0x33, 0x3C, 0x9A, 0xAD, 0x39, 0xA6,
  0x68, 0xF5, 0x78, 0x74, 0x4D, 0x8F, 0x90, 0x0B, 0x51, 0x22, 0xDA, 0xD7, 0xA3, 0xF5, 0x87, 0x15,
  0xCB, 0x36, 0x26, 0x86, 0xA0, 0x83, 0x2F, 0xE8, 0xB1, 0x57, 0xB9, 0x04, 0x36, 0x27, 0x6A, 0x15,
  0xDC, 0x7C, 0x94, 0xD7, 0x6E, 0xEB, 0x56, 0xE3, 0xC2, 0xDE, 0x6F, 0x49, 0x72, 0x80, 0xDE, 0x14,
  0x0F, 0x5F, 0x87, 0x4B, 0xB2, 0x61, 0xF3, 0xE4, 0xEE, 0x02, 0x69, 0x19, 0x9E, 0xED, 0xA5, 0xCE,
  0xD2, 0x8D, 0x8C, 0x8C, 0xDC, 0x7B, 0xC7, 0xBB, 0x31, 0x2C, 0x5F, 0x06, 0xC6, 0xFE, 0xFF, 0xD0,
  0x8C, 0xD4, 0x92, 0x21, 0xE0, 0x4C, 0xE5, 0x2E, 0x2A, 0x13, 0xFE, 0x4E, 0xDF, 0x2D, 0x63, 0xFC,
  0x1F, 0xA5, 0xE7, 0xC4, 0x70, 0xA5, 0x13, 0xB3, 0xF4, 0x39, 0x4C, 0x62, 0xCF, 0xE1, 0xCD, 0x83,
  0x43, 0x20, 0xFD, 0x31, 0xB5, 0xC9, 0x78, 0xD8, 0xB4, 0xEC, 0xC1, 0xC3, 0x22, 0xA7, 0xE8, 0x76,
  0x99, 0xAA, 0xC9, 0xE5, 0x67, 0x4C, 0xC2, 0x2D, 0xE3, 0x12, 0xBA, 0x05, 0xE7, 0xA8, 0xBF, 0x0D,
  0x53, 0xA7, 0x98, 0x28, 0xDC, 0xC1, 0xC2, 0x03, 0xC0, 0xF6, 0xD9, 0x26, 0x1D, 0x9A, 0xE8, 0x47,
  0x30, 0x1D, 0x24, 0x8B, 0x20, 0x84, 0x6C, 0x9A, 0x40, 0x48, 0x94, 0x71, 0x93, 0xAE, 0x5A, 0x9C,
  0x8F, 0x9A, 0x08, 0xEA, 0x4C, 0x32, 0x7D, 0xE5, 0x6C, 0x5B, 0xAF, 0x47, 0x4F, 0x39, 0x64, 0x24,
  0x3F, 0x4F, 0x29, 0xC1, 0x74, 0xE5, 0x84, 0x95, 0x2C, 0xDF, 0x5E, 0x13, 0x65, 0x36, 0x30, 0x9C,
  0xCD, 0xA3, 0x46, 0x11, 0x19, 0xC3, 0x90, 0x27, 0x60, 0x33, 0x39, 0x49, 0x6E, 0x6E, 0xA7, 0x00,
  0x2C, 0x3B, 0x2A, 0x8A, 0x3F, 0xCD, 0x19, 0x7F, 0xA5, 0x56, 0x3D, 0x1B, 0xEF, 0xE0, 0x7C, 0x03,
  0x98, 0x37, 0x6A, 0xD6, 0xC9, 0x4D, 0xBD, 0x72, 0x55, 0xAF, 0xC0, 0xD4, 0xD3, 0x7C, 0x40, 0x84,
  0xD1, 0x94, 0xF5, 0xA4, 0x77, 0x2C, 0xED, 0x7E, 0x13, 0xA6, 0x64, 0xF4, 0x78, 0xB9, 0xB1, 0x16,
  0x8B, 0x6E, 0x49, 0x5E, 0x3B, 0x9E, 0xDA, 0x76, 0xA2, 0xB4, 0xE6, 0xF1, 0x25, 0x8C, 0x00, 0x13,
  0x50, 0x89, 0x2F, 0xF0, 0x07, 0xA5, 0x13, 0xAE, 0xC9, 0xBA, 0x3D, 0x88, 0xFB, 0x43, 0xC5, 0xF5,
  0xAF, 0x5D, 0x9F, 0x7A, 0xB3, 0xEC, 0x89, 0x51, 0x56, 0x6D, 0xA5, 0xC2, 0xEF, 0xF0, 0x9E, 0xC7,
  0xCD, 0xBF, 0xD8, 0x25, 0x3F, 0xC0, 0x0B, 0x48, 0x06, 0xAA, 0x5F, 0x4E, 0xDF, 0xEC, 0xC1, 0x4C,
  0x89, 0x81, 0xA4, 0xEE, 0x4F, 0x16, 0xAD, 0x64, 0x14, 0xBB, 0x4B, 0x5C, 0xEE, 0x07, 0xD0, 0x46,
  0xB6, 0xA5, 0xD4, 0x79, 0x56, 0xB0, 0x5E, 0x8E, 0x3A, 0xE1, 0xF1, 0xE5, 0x22, 0xDE, 0xC0, 0x24,
  0xEF, 0x42, 0x5B, 0x1F, 0xE7, 0xBE, 0xC3, 0xF2, 0x7C, 0xD6, 0xF6, 0xC4, 0x61, 0x33, 0xF3, 0x43,
  0x4C, 0x4D, 0x2F, 0xEE, 0x35, 0x87, 0x9A, 0xA9, 0xD2, 0xC0, 0xB0, 0xBB, 0xAA, 0xD9, 0xFB, 0x6D,
  0xFA, 0x7F, 0x17, 0x55, 0x9D, 0x4F, 0x36, 0x21, 0x87, 0x37, 0xA8, 0x27, 0xDE, 0x42, 0x61, 0x42,
  0x75, 0x31, 0x9F, 0x29, 0x63, 0x2B, 0xD5, 0xFA, 0xA4, 0x65, 0x94, 0xD9, 0xBE, 0xB3, 0x37, 0x4C,
  0x09, 0x0E, 0x3D, 0x36, 0x0D, 0x9A, 0xB8, 0x32, 0x28, 0xB5, 0xAB, 0xE3, 0x8B, 0x49, 0xD2, 0x0E,
  0xEE, 0x25, 0xAA, 0x30, 0x71, 0xFE, 0x22, 0x95, 0x57, 0xF4, 0xD0, 0x67, 0x50, 0x05, 0x02, 0xA2,
  0xCA, 0x16, 0x7F, 0xF9, 0xCD, 0x4A, 0xD4, 0xC7, 0x28, 0x97, 0xF8, 0x32, 0x33, 0xCA, 0xE3, 0xC8,
  0xD4, 0x1B, 0xB7, 0x1D, 0xBE, 0x7F, 0x08, 0xAC, 0xB5, 0xDE, 0xAA, 0x2D, 0xB8, 0x76, 0xD0, 0xB3,
  0xD4, 0x96, 0x51, 0x37, 0x49, 0xA1, 0xD1, 0xC1, 0x31, 0x86, 0x12, 0x92, 0xD2, 0xC0, 0x59, 0xA3,
  0x7B, 0x68, 0x91, 0xE4, 0x59, 0x96, 0x9C, 0xDD, 0x70, 0x22, 0xA8, 0xE4, 0x29, 0x03, 0x89, 0x46,
  0xD6, 0x81, 0x66, 0xF9, 0x5B, 0x44, 0x32, 0x98, 0xC7, 0x3C, 0xE2, 0x80, 0x41, 0x61, 0x31, 0x46,
  0xFE, 0x8F, 0xE3, 0xD3, 0x72, 0x71, 0x8E, 0xED, 0x8F, 0x55, 0xA6, 0xEC, 0xD7, 0x17, 0x40, 0xA8,
  0x67, 0xC5, 0x8D, 0x1F, 0x02, 0x12, 0xDE, 0x1F, 0x2F, 0xD8, 0x2C, 0xD1, 0xD7, 0x40, 0x2A, 0x24,
  0x20, 0xE6, 0x5D, 0x02, 0x85, 0x79, 0x42, 0x1C, 0x44, 0x01, 0xA3, 0xCC, 0x30, 0xE4, 0xED, 0xE9,
  0xD1, 0xE3, 0xE3, 0xCE, 0x4D, 0x07, 0xB4, 0x0E, 0x75, 0x9A, 0xEA, 0x2F, 0x73, 0x3E, 0x90, 0x8F,
  0xDB, 0x5D, 0x09, 0x1C, 0x77, 0xE5, 0xDB, 0x43, 0x37, 0x86, 0x4F, 0xEB, 0x0C, 0xE6, 0xF8, 0x74,
  0xF4, 0x98, 0x21, 0xBD, 0x2D, 0x9D, 0x9E, 0x54, 0x75, 0x7C, 0xE3, 0xBF, 0xF8, 0x99, 0xE6, 0x18,
  0x6D, 0x70, 0xF9, 0xD7, 0x5B, 0x0E, 0xE6, 0x92, 0xD8, 0x00, 0xFF, 0x19, 0xAB, 0x17, 0xF4, 0x6F,
  0x34, 0x6D, 0xB6, 0x56, 0xB0, 0x36, 0x2C, 0x6D, 0xE4, 0x01, 0x33, 0x45, 0x8C, 0xE6, 0xE1, 0x2A,
  0x80, 0x88, 0xA3, 0xCD, 0x8B, 0x8A, 0x9C, 0xC1, 0xCD, 0x2B, 0x54, 0xA5, 0x98, 0x38, 0x02, 0x67,
  0xEF, 0x31, 0xC8, 0x98, 0xE9, 0xBF, 0x9B, 0xCA, 0xDF, 0xF3, 0x55, 0xED, 0x56, 0x6F, 0xF9, 0x1C,
  0xA8, 0x1F, 0x43, 0x74, 0xDE, 0xB9, 0xF4, 0x4C, 0xA7, 0x49, 0x1A, 0x57, 0x47, 0x0B, 0x48, 0x14,
  0xB1, 0x87, 0xC4, 0x93, 0x5C, 0x79, 0xEE, 0x36, 0x62, 0x4B, 0x19, 0x21, 0xBC, 0xF6, 0xBF, 0x97,
  0xBF, 0x75, 0x59, 0x40, 0x00, 0x0C, 0x22, 0xE1, 0x1F, 0x28, 0x5D, 0x10, 0x43, 0x71, 0xBE, 0x38,
  0x37, 0xDA, 0x77, 0xBE, 0x07, 0xB2, 0x3A, 0xF0, 0xCA, 0xEF, 0x69, 0x17, 0x70, 0xCA, 0x9F, 0xF1,
  0xEF, 0x50, 0xE0, 0xF6, 0x80, 0xC3, 0xD3, 0x57, 0x2A, 0x22, 0x8D, 0xBD, 0x24, 0x1B, 0x6D, 0x7F,
  0x03, 0xF4, 0x2F, 0x74, 0xA0, 0x88, 0x37, 0xC9, 0xE6, 0x38, 0xC0, 0x68, 0x6E, 0x50, 0xE2, 0xBD,
  0xD7, 0xF7, 0x74, 0x0D, 0xC2, 0x99, 0xE4, 0x23, 0xC5, 0x03, 0xB2, 0x85, 0x62, 0x3D, 0xAF, 0x5C,
  0xA6, 0x49, 0x36, 0x1B, 0x26, 0x80, 0x25, 0xEA, 0x07, 0x51, 0x8F, 0x92, 0x62, 0x75, 0x5C, 0xCE,
  0xF8, 0x6E, 0xC2, 0x9A, 0x8E, 0xEB, 0xCB, 0x6B, 0xF4, 0x51, 0x88, 0xC3, 0x5C, 0xF6, 0xBE, 0x49,
  0x86, 0xB2, 0xBD, 0xCE, 0x04, 0x54, 0x75, 0x2E, 0xD6, 0x2A, 0x34, 0x4C, 0xA0, 0x52, 0x35, 0x1F,
  0xF2, 0x81, 0xF2, 0xCE, 0xEE, 0x31, 0xF5, 0x07, 0x71, 0x4A, 0xFD, 0x0B, 0xAC, 0xCF, 0x3C, 0x74,
  0x43, 0x76, 0x32, 0x70, 0xED, 0x64, 0x35, 0x99, 0xF6, 0x16, 0x95, 0xDB, 0xF1, 0x6F, 0xE9, 0x1C,
  0x07, 0x6D, 0xB8, 0xDE, 0xBE, 0x85, 0xB1, 0x42, 0xD6, 0x15, 0xB8, 0x43, 0x0E, 0x2B, 0x8C, 0xCF,
  0x98, 0x7A, 0x9E, 0xF8, 0xAA, 0xB8, 0xE0, 0xB8, 0x17, 0xC6, 0xD4, 0x9D, 0xFD, 0x28, 0xB7, 0xF6,
  0xDF, 0xB9, 0x03, 0x54, 0xD1, 0x1D, 0x0E, 0x30, 0xC0, 0xF4, 0xE4, 0xFD, 0xA3, 0xBE, 0xB7, 0xE6,
  0xE6, 0xF8, 0x2A, 0xEC, 0x52, 0xFD, 0xDA, 0xB1, 0xED, 0xAA, 0x4B, 0xA0, 0xD8, 0x61, 0xCD, 0x16,
  0xCB, 0x94, 0xB8, 0x47, 0xA9, 0x40, 0x04, 0x2A, 0xF1, 0xDF, 0x01, 0x73, 0xED, 0xC6, 0x58, 0x49,
  0x2D, 0xF4, 0xC8, 0x14, 0x73, 0xF0, 0xC0, 0x52, 0x10, 0xBB, 0x4F, 0xC3, 0xAE, 0xEF, 0x0E, 0x61,
  0x48, 0x22, 0xAA, 0xD1, 0xFB, 0x6B, 0xE0, 0x0B, 0x1B, 0x54, 0x7F, 0x56, 0xB5, 0xEB, 0x22, 0xCA,
  0x99, 0x87, 0x7A, 0xD2, 0x8F, 0x9F, 0xDA, 0xDF, 0x76, 0x45, 0x62, 0x81, 0xA2, 0x55, 0x4D, 0x83,
  0x99, 0x6D, 0x96, 0xBF, 0xE3, 0x9D, 0x83, 0xE6, 0xB3, 0xF2, 0xB8, 0xA7, 0x74, 0x40, 0xB2, 0x0A,
  0x35, 0x71, 0xDE, 0x05, 0x45, 0x9E, 0x74, 0xA8, 0xDF, 0xE4, 0xDD, 0x31, 0x10, 0x8F, 0xEB, 0xA6,
  0x1F, 0x8A, 0x2A, 0xD9, 0xD6, 0x2A, 0x3B, 0x3B, 0xFB, 0xE0, 0x81, 0xB4, 0x68, 0x0D, 0x2A, 0x4B,
  0x8B, 0x82, 0x74, 0xC6, 0x5C, 0x77, 0x96, 0x42, 0x8B, 0x5F, 0x19, 0x9F, 0xD6, 0x5A, 0xA0, 0x70,
  0xDA, 0xA4, 0xE8, 0xB5, 0x44, 0x7B, 0xBE, 0x2D, 0xD2, 0x37, 0xE3, 0xCB, 0x9F, 0xBB, 0x7D, 0x02,
  0x3A, 0x08, 0x48, 0x6A, 0x58, 0xFB, 0x72, 0x08, 0x4B, 0x4D, 0x88, 0xF2, 0x53, 0x02, 0x76, 0x00,
  0x37, 0x76, 0x47, 0x26, 0x47, 0x57, 0x73, 0x72, 0x85, 0x5D, 0xFC, 0xB6, 0x61, 0x28, 0x2D, 0x28,
  0xC9, 0x49, 0xAB, 0x7E, 0x50, 0xC1, 0x79, 0xD8, 0x94, 0xE3, 0x2A, 0x8B, 0xE4, 0x65, 0xE8, 0x6D,
  0x3B, 0x17, 0x89, 0x56, 0x29, 0xBC, 0xBD, 0xE9, 0xED, 0xB2, 0xF7, 0xF0, 0xCB, 0x27, 0xED, 0x3E,
  0x6A, 0x62, 0x5A, 0x50, 0x52, 0x6B, 0x49, 0x8B, 0xE0, 0xD1, 0xCA, 0x2B, 0x33, 0x2F, 0xA0, 0x63,
  0x6E, 0xEF, 0x33, 0x35, 0x24, 0xB9, 0xEC, 0xC1, 0x12, 0x17, 0xF8, 0xB6, 0x4B, 0xDB, 0xEF, 0x7C,
  0x9A, 0x71, 0x82, 0x8C, 0x15, 0x19, 0xB6, 0x8C, 0xA5, 0xE5, 0x8B, 0x4F, 0xA6, 0x44, 0x07, 0x92,
  0x38, 0x36, 0x4C, 0xBE, 0xED, 0x80, 0xD7, 0x8C, 0xC7, 0x2E, 0xEA, 0x01, 0x5E, 0x8E, 0x0B, 0x9B,
  0xC6, 0x4D, 0x97, 0xCF, 0x70, 0xE8, 0x27, 0x4E, 0x07, 0xCD, 0xC2, 0x24, 0x38, 0x94, 0xBD, 0xC7,
  0x36, 0x50, 0xCE, 0x60, 0x8C, 0x97, 0x99, 0x0D, 0x12, 0x23, 0x65, 0x48, 0x3A, 0x0D, 0xFA, 0x6E,
  0xDE, 0xF2, 0x17, 0x82, 0x40, 0x6D, 0x8B, 0xC9, 0xF9, 0xC9, 0xCA, 0x3C, 0x4C, 0xFE, 0xEA, 0x35,
  0x8D, 0x20, 0x95, 0x4D, 0x34, 0xCD, 0xFB, 0xA4, 0x3C, 0x02, 0x48, 0x7C, 0x81, 0x48, 0x60, 0xDF,
  0x28, 0x05, 0x6C, 0xA0, 0x36, 0x50, 0xD2, 0x5C, 0xEC, 0x19, 0xB0, 0x96, 0xFB, 0x53, 0x3D, 0x08,
  0xE3, 0xC3, 0x9A, 0x54, 0xB2, 0x44, 0xD3, 0x96, 0x99, 0xB7, 0xDC, 0xA4, 0xD1, 0x10, 0x1D, 0xF5,
  0x36, 0x76, 0x38, 0x70, 0xC0, 0x3B, 0xBA, 0xDB, 0xB1, 0x09, 0xC8, 0x69, 0x71, 0x78, 0xC5, 0x96,
  0xCA, 0x32, 0x6E, 0xD4, 0x13, 0x9C, 0xFC, 0x61, 0x8C, 0xCF, 0xAA, 0xF2, 0x4C, 0xFB, 0xB4, 0x68,
  0x24, 0xDB, 0x74, 0x0B, 0x6A, 0xE6, 0xFA, 0x7E, 0x95, 0x43, 0xBE, 0x74, 0x5F, 0x64, 0x6B, 0x1C,
  0x6E, 0x0B, 0xCB, 0xCB, 0x65, 0x67, 0x1F, 0x26, 0x24, 0xA9, 0x4D, 0x62, 0x90, 0x2F, 0x13, 0x56,
  0x56, 0xE8, 0x05, 0x65, 0x31, 0x9E, 0x9C, 0x88, 0x00
};

uint8_t compressed2[1593] = {
  0x00, 0xFF, 0xFF, 0x07, 0x43, 0x00, 0x38, 0x00, 0x07, 0x03, 0x07, 0x16, 0x00, 0xFF, 0xFF, 0x07,
  0x01, 0x00, 0x08, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0xFF, 0xFF, 0x07, 0x2C, 0x00, 0x18, 0x00,
  0x01, 0x01, 0x03, 0x11, 0x00, 0x00, 0x2E, 0x8A, 0x62, 0xD3, 0x14, 0x97, 0x58, 0xA0, 0x44, 0x77,
  0xC7, 0xB7, 0xAE, 0xC7, 0x58, 0x09, 0xD1, 0xAA, 0xF0, 0x4D, 0x83, 0x04, 0x51, 0xEA, 0x25, 0xFA,
  0xF5, 0xC7, 0x53, 0x13, 0x2D, 0x10, 0x49, 0x3A, 0xA4, 0xE7, 0xE4, 0x3B, 0x44, 0xEF, 0x00, 0xA5,
  0x59, 0x85, 0x0B, 0x53, 0xAF, 0xEF, 0x0E, 0xFE, 0x1B, 0x32, 0x57, 0x5C, 0x4F, 0xF9, 0xC6, 0x40,
  0xF5, 0xD0, 0x1D, 0xBB, 0x0C, 0x31, 0x3A, 0xC2, 0x16, 0x58, 0x56, 0xD7, 0x05, 0x6E, 0x9A, 0x39,
  0xF5, 0xA7, 0x8D, 0x5F, 0xC5, 0xB7, 0x82, 0xFF, 0x85, 0xA8, 0x7C, 0xFB, 0xCA, 0x04, 0x03, 0xEC,
  0xF3, 0xE8, 0x9F, 0xC7, 0xF2, 0x73, 0x2F, 0x34, 0x3F, 0x35, 0x56, 0xBC, 0xC3, 0x29, 0xFA, 0x88,
  0xA2, 0xE1, 0x12, 0xC3, 0xF6, 0xDA, 0x72, 0xF0, 0x76, 0x89, 0x2C, 0x30, 0xCC, 0x11, 0xBF, 0xF6,
  0x7D, 0x98, 0x49, 0xB5, 0x63, 0x42, 0xDC, 0xF0, 0x98, 0x59, 0x31, 0x41, 0x96, 0x2F, 0x85, 0x5F,
  0x8A, 0xFF, 0x1D, 0x0E, 0xB0, 0x65, 0xD3, 0x78, 0x0C, 0xD9, 0x33, 0x3C, 0x9A, 0xAD, 0x39, 0xA6,
  0x68, 0xF5, 0x78, 0x74, 0x4D, 0x8F, 0x90, 0x0B, 0x51, 0x22, 0xDA, 0xD7, 0xA3, 0xF5, 0x87, 0x15,
  0xCB, 0x36, 0x26, 0x86, 0xA0, 0x83, 0x2F, 0xE8, 0xB1, 0x57, 0xB9, 0x04, 0x36, 0x27, 0x6A, 0x15,
  0xDC, 0x7C, 0x94, 0xD7, 0x6E, 0xEB, 0x56, 0xE3, 0xC2, 0xDE, 0x6F, 0x49, 0x72, 0x80, 0xDE, 0x14,
  0x0F, 0x5F, 0x87, 0x4B, 0xB2, 0x61, 0xF3, 0xE4, 0xEE, 0x02, 0x69, 0x19, 0x9E, 0xED, 0xA5, 0xCE,
  0xD2, 0x8D, 0x8C, 0x8C, 0xDC, 0x7B, 0xC7, 0xBB, 0x31, 0x2C, 0x5F, 0x06, 0xC6, 0xFE, 0xFF, 0xD0,
  0x8C, 0xD4, 0x92, 0x21, 0xE0, 0x4C, 0xE5, 0x2E, 0x2A, 0x13, 0xFE, 0x4E, 0xDF, 0x2D, 0x63, 0xFC,
  0x1F, 0xA5, 0xE7, 0xC4, 0x70, 0xA5, 0x13, 0xB3, 0xF4, 0x39, 0x4C, 0x62, 0xCF, 0xE1, 0xCD, 0x83,
  0x43, 0x20, 0xFD, 0x31, 0xB5, 0xC9, 0x78, 0xD8, 0xB4, 0xEC, 0xC1, 0xC3, 0x22, 0xA7, 0xE8, 0x76,
  0x99, 0xAA, 0xC9, 0xE5, 0x67, 0x4C, 0xC2, 0x2D, 0xE3, 0x12, 0xBA, 0x05, 0xE7, 0xA8, 0xBF, 0x0D,
  0x53, 0xA7, 0x98, 0x28, 0xDC, 0xC1, 0xC2, 0x03, 0xC0, 0xF6, 0xD9, 0x26, 0x1D, 0x9A, 0xE8, 0x47,
  0x30, 0x1D, 0x24, 0x8B, 0x20, 0x84, 0x6C, 0x9A, 0x40, 0x48, 0x94, 0x71, 0x93, 0xAE, 0x5A, 0x9C,
  0x8F, 0x9A, 0x08, 0xEA, 0x4C, 0x32, 0x7D, 0xE5, 0x6C, 0x5B, 0xAF, 0x47, 0x4F, 0x39, 0x64, 0x24,
  0x3F, 0x4F, 0x29, 0xC1, 0x74, 0xE5, 0x84, 0x95, 0x2C, 0xDF, 0x5E, 0x13, 0x65, 0x36, 0x30, 0x9C,
  0xCD, 0xA3, 0x46, 0x11, 0x19, 0xC3, 0x90, 0x27, 0x60, 0x33, 0x39, 0x49, 0x6E, 0x6E, 0xA7, 0x00,
  0x2C, 0x3B, 0x2A, 0x8A, 0x3F, 0xCD, 0x19, 0x7F, 0xA5, 0x56, 0x3D, 0x1B, 0xEF, 0xE0, 0x7C, 0x03,
  0x98, 0x37, 0x6A, 0xD6, 0xC9, 0x4D, 0xBD, 0x72, 0x55, 0xAF, 0xC0, 0xD4, 0xD3, 0x7C, 0x40, 0x84,
  0xD1, 0x94, 0xF5, 0xA4, 0x77, 0x2C, 0xED, 0x7E, 0x13, 0xA6, 0x64, 0xF4, 0x78, 0xB9, 0xB1, 0x16,
  0x8B, 0x6E, 0x49, 0x5E, 0x3B, 0x9E, 0xDA, 0x76, 0xA2, 0xB4, 0xE6, 0xF1, 0x25, 0x8C, 0x00, 0x13,
  0x50, 0x89, 0x2F, 0xF0, 0x07, 0xA5, 0x13, 0xAE, 0xC9, 0xBA, 0x3D, 0x88, 0xFB, 0x43, 0xC5, 0xF5,
  0xAF, 0x5D, 0x9F, 0x7A, 0xB3, 0xEC, 0x89, 0x51, 0x56, 0x6D, 0xA5, 0xC2, 0xEF, 0xF0, 0x9E, 0xC7,
  0xCD, 0xBF, 0xD8, 0x25, 0x3F, 0xC0, 0x0B, 0x48, 0x06, 0xAA, 0x5F, 0x4E, 0xDF, 0xEC, 0xC1, 0x4C,
  0x89, 0x81, 0xA4, 0xEE, 0x4F, 0x16, 0xAD, 0x64, 0x14, 0xBB, 0x4B, 0x5C, 0xEE, 0x07, 0xD0, 0x46,
  0xB6, 0xA5, 0xD4, 0x79, 0x56, 0xB0, 0x5E, 0x8E, 0x3A, 0xE1, 0xF1, 0xE5, 0x22, 0xDE, 0xC0, 0x24,
  0xEF, 0x42, 0x5B, 0x1F, 0xE7, 0xBE, 0xC3, 0xF2, 0x7C, 0xD6, 0xF6, 0xC4, 0x61, 0x33, 0xF3, 0x43,
  0x4C, 0x4D, 0x2F, 0xEE, 0x35, 0x87, 0x9A, 0xA9, 0xD2, 0xC0, 0xB0, 0xBB, 0xAA, 0xD9, 0xFB, 0x6D,
  0xFA, 0x7F, 0x17, 0x55, 0x9D, 0x4F, 0x36, 0x21, 0x87, 0x37, 0xA8, 0x27, 0xDE, 0x42, 0x61, 0x42,
  0x75, 0x31, 0x9F, 0x29, 0x63, 0x2B, 0xD5, 0xFA, 0xA4, 0x65, 0x94, 0xD9, 0xBE, 0xB3, 0x37, 0x4C,
  0x09, 0x0E, 0x3D, 0x36, 0x0D, 0x9A, 0xB8, 0x32, 0x28, 0xB5, 0xAB, 0xE3, 0x8B, 0x49, 0xD2, 0x0E,
  0xEE, 0x25, 0xAA, 0x30, 0x71, 0xFE, 0x22, 0x95, 0x57, 0xF4, 0xD0, 0x67, 0x50, 0x05, 0x02, 0xA2,
  0xCA, 0x16, 0x7F, 0xF9, 0xCD, 0x4A, 0xD4, 0xC7, 0x28, 0x97, 0xF8, 0x32, 0x33, 0xCA, 0xE3, 0xC8,
  0xD4, 0x1B, 0xB7, 0x1D, 0xBE, 0x7F, 0x08, 0xAC, 0xB5, 0xDE, 0xAA, 0x2D, 0xB8, 0x76, 0xD0, 0xB3,
  0xD4, 0x96, 0x51, 0x37, 0x49, 0xA1, 0xD1, 0xC1, 0x31, 0x86, 0x12, 0x92, 0xD2, 0xC0, 0x59, 0xA3,
  0x7B, 0x68, 0x91, 0xE4, 0x59, 0x96, 0x9C, 0xDD, 0x70, 0x22, 0xA8, 0xE4, 0x29, 0x03, 0x89, 0x46,
  0xD6, 0x81, 0x66, 0xF9, 0x5B, 0x44, 0x32, 0x98, 0xC7, 0x3C, 0xE2, 0x80, 0x41, 0x61, 0x31, 0x46,
  0xFE, 0x8F, 0xE3, 0xD3, 0x72, 0x71, 0x8E, 0xED, 0x8F, 0x55, 0xA6, 0xEC, 0xD7, 0x17, 0x40, 0xA8,
  0x67, 0xC5, 0x8D, 0x1F, 0x02, 0x12, 0xDE, 0x1F, 0x2F, 0xD8, 0x2C, 0xD1, 0xD7, 0x40, 0x2A, 0x24,
  0x20, 0xE6, 0x5D, 0x02, 0x85, 0x79, 0x42, 0x1C, 0x44, 0x01, 0xA3, 0xCC, 0x30, 0xE4, 0xED, 0xE9,
  0xD1, 0xE3, 0xE3, 0xCE, 0x4D, 0x07, 0xB4, 0x0E, 0x75, 0x9A, 0xEA, 0x2F, 0x73, 0x3E, 0x90, 0x8F,
  0xDB, 0x5D, 0x09, 0x1C, 0x77, 0xE5, 0xDB, 0x43, 0x37, 0x86, 0x4F, 0xEB, 0x0C, 0xE6, 0xF8, 0x74,
  0xF4, 0x98, 0x21, 0xBD, 0x2D, 0x9D, 0x9E, 0x54, 0x75, 0x7C, 0xE3, 0xBF, 0xF8, 0x99, 0xE6, 0x18,
  0x6D, 0x70, 0xF9, 0xD7, 0x5B, 0x0E, 0xE6, 0x92, 0xD8, 0x00, 0xFF, 0x19, 0xAB, 0x17, 0xF4, 0x6F,
  0x34, 0x6D, 0xB6, 0x56, 0xB0, 0x36, 0x2C, 0x6D, 0xE4, 0x01, 0x33, 0x45, 0x8C, 0xE6, 0xE1, 0x2A,
  0x80, 0x88, 0xA3, 0xCD, 0x8B, 0x8A, 0x9C, 0xC1, 0xCD, 0x2B, 0x54, 0xA5, 0x98, 0x38, 0x02, 0x67,
  0xEF, 0x31, 0xC8, 0x98, 0xE9, 0xBF, 0x9B, 0xCA, 0xDF, 0xF3, 0x55, 0xED, 0x56, 0x6F, 0xF9, 0x1C,
  0xA8, 0x1F, 0x43, 0x74, 0xDE, 0xB9, 0xF4, 0x4C, 0xA7, 0x49, 0x1A, 0x57, 0x47, 0x0B, 0x48, 0x14,
  0xB1, 0x87, 0xC4, 0x93, 0x5C, 0x79, 0xEE, 0x36, 0x62, 0x4B, 0x19, 0x21, 0xBC, 0xF6, 0xBF, 0x97,
  0xBF, 0x75, 0x59, 0x40, 0x00, 0x0C, 0x22, 0xE1, 0x1F, 0x28, 0x5D, 0x10, 0x43, 0x71, 0xBE, 0x38,
  0x37, 0xDA, 0x77, 0xBE, 0x07, 0xB2, 0x3A, 0xF0, 0xCA, 0xEF, 0x69, 0x17, 0x70, 0xCA, 0x9F, 0xF1,
  0xEF, 0x50, 0xE0, 0xF6, 0x80, 0xC3, 0xD3, 0x57, 0x2A, 0x22, 0x8D, 0xBD, 0x24, 0x1B, 0x6D, 0x7F,
  0x03, 0xF4, 0x2F, 0x74, 0xA0, 0x88, 0x37, 0xC9, 0xE6, 0x38, 0xC0, 0x68, 0x6E, 0x50, 0xE2, 0xBD,
  0xD7, 0xF7, 0x74, 0x0D, 0xC2, 0x99, 0xE4, 0x23, 0xC5, 0x03, 0xB2, 0x85, 0x62, 0x3D, 0xAF, 0x5C,
  0xA6, 0x49, 0x36, 0x1B, 0x26, 0x80, 0x25, 0xEA, 0x07, 0x51, 0x8F, 0x92, 0x62, 0x75, 0x5C, 0xCE,
  0xF8, 0x6E, 0xC2, 0x9A, 0x8E, 0xEB, 0xCB, 0x6B, 0xF4, 0x51, 0x88, 0xC3, 0x5C, 0xF6, 0xBE, 0x49,
  0x86, 0xB2, 0xBD, 0xCE, 0x04, 0x54, 0x75, 0x2E, 0xD6, 0x2A, 0x34, 0x4C, 0xA0, 0x52, 0x35, 0x1F,
  0xF2, 0x81, 0xF2, 0xCE, 0xEE, 0x31, 0xF5, 0x07, 0x71, 0x4A, 0xFD, 0x0B, 0xAC, 0xCF, 0x3C, 0x74,
  0x43, 0x76, 0x32, 0x70, 0xED, 0x64, 0x35, 0x99, 0xF6, 0x16, 0x95, 0xDB, 0xF1, 0x6F, 0xE9, 0x1C,
  0x07, 0x6D, 0xB8, 0xDE, 0xBE, 0x85, 0xB1, 0x42, 0xD6, 0x15, 0xB8, 0x43, 0x0E, 0x2B, 0x8C, 0xCF,
  0x98, 0x7A, 0x9E, 0xF8, 0xAA, 0xB8, 0xE0, 0xB8, 0x17, 0xC6, 0xD4, 0x9D, 0xFD, 0x28, 0xB7, 0xF6,
  0xDF, 0xB9, 0x03, 0x54, 0xD1, 0x1D, 0x0E, 0x30, 0xC0, 0xF4, 0xE4, 0xFD, 0xA3, 0xBE, 0xB7, 0xE6,
  0xE6, 0xF8, 0x2A, 0xEC, 0x52, 0xFD, 0xDA, 0xB1, 0xED, 0xAA, 0x4B, 0xA0, 0xD8, 0x61, 0xCD, 0x16,
  0xCB, 0x94, 0xB8, 0x47, 0xA9, 0x40, 0x04, 0x2A, 0xF1, 0xDF, 0x01, 0x73, 0xED, 0xC6, 0x58, 0x49,
  0x2D, 0xF4, 0xC8, 0x14, 0x73, 0xF0, 0xC0, 0x52, 0x10, 0xBB, 0x4F, 0xC3, 0xAE, 0xEF, 0x0E, 0x61,
  0x48, 0x22, 0xAA, 0xD1, 0xFB, 0x6B, 0xE0, 0x0B, 0x1B, 0x54, 0x7F, 0x56, 0xB5, 0xEB, 0x22, 0xCA,
  0x99, 0x87, 0x7A, 0xD2, 0x8F, 0x9F, 0xDA, 0xDF, 0x76, 0x45, 0x62, 0x81, 0xA2, 0x55, 0x4D, 0x83,
  0x99, 0x6D, 0x96, 0xBF, 0xE3, 0x9D, 0x83, 0xE6, 0xB3, 0xF2, 0xB8, 0xA7, 0x74, 0x40, 0xB2, 0x0A,
  0x35, 0x71, 0xDE, 0x05, 0x45, 0x9E, 0x74, 0xA8, 0xDF, 0xE4, 0xDD, 0x31, 0x10, 0x8F, 0xEB, 0xA6,
  0x1F, 0x8A, 0x2A, 0xD9, 0xD6, 0x2A, 0x3B, 0x3B, 0xFB, 0xE0, 0x81, 0xB4, 0x68, 0x0D, 0x2A, 0x4B,
  0x8B, 0x82, 0x74, 0xC6, 0x5C, 0x77, 0x96, 0x42, 0x8B, 0x5F, 0x19, 0x9F, 0xD6, 0x5A, 0xA0, 0x70,
  0xDA, 0xA4, 0xE8, 0xB5, 0x44, 0x7B, 0xBE, 0x2D, 0xD2, 0x37, 0xE3, 0xCB, 0x9F, 0xBB, 0x7D, 0x02,
  0x3A, 0x08, 0x48, 0x6A, 0x58, 0xFB, 0x72, 0x08, 0x4B, 0x4D, 0x88, 0xF2, 0x53, 0x02, 0x76, 0x00,
  0x37, 0x76, 0x47, 0x26, 0x47, 0x57, 0x73, 0x72, 0x85, 0x5D, 0xFC, 0xB6, 0x61, 0x28, 0x2D, 0x28,
  0xC9, 0x49, 0xAB, 0x7E, 0x50, 0xC1, 0x79, 0xD8, 0x94, 0xE3, 0x2A, 0x8B, 0xE4, 0x65, 0xE8, 0x6D,
  0x3B, 0x17, 0x89, 0x56, 0x29, 0xBC, 0xBD, 0xE9, 0xED, 0xB2, 0xF7, 0xF0, 0xCB, 0x27, 0xED, 0x3E,
  0x6A, 0x62, 0x5A, 0x50, 0x52, 0x6B, 0x49, 0x8B, 0xE0, 0xD1, 0xCA, 0x2B, 0x33, 0x2F, 0xA0, 0x63,
  0x6E, 0xEF, 0x33, 0x35, 0x24, 0xB9, 0xEC, 0xC1, 0x12, 0x17, 0xF8, 0xB6, 0x4B, 0xDB, 0xEF, 0x7C,
  0x9A, 0x71, 0x82, 0x8C, 0x15, 0x19, 0xB6, 0x8C, 0xA5, 0xE5, 0x8B, 0x4F, 0xA6, 0x44, 0x07, 0x92,
  0x38, 0x36, 0x4C, 0xBE, 0xED, 0x80, 0xD7, 0x8C, 0xC7, 0x2E, 0xEA, 0x01, 0x5E, 0x8E, 0x0B, 0x9B,
  0xC6, 0x4D, 0x97, 0xCF, 0x70, 0xE8, 0x27, 0x4E, 0x07, 0xCD, 0xC2, 0x24, 0x38, 0x94, 0xBD, 0xC7,
  0x36, 0x50, 0xCE, 0x60, 0x8C, 0x97, 0x99, 0x0D, 0x12, 0x23, 0x65, 0x48, 0x3A, 0x0D, 0xFA, 0x6E,
  0xDE, 0xF2, 0x17, 0x82, 0x40, 0x6D, 0x8B, 0xC9, 0xF9, 0xC9, 0xCA, 0x3C, 0x4C, 0xFE, 0xEA, 0x35,
  0x8D, 0x20, 0x95, 0x4D, 0x34, 0xCD, 0xFB, 0xA4, 0x3C, 0x02, 0x48, 0x7C, 0x81, 0x48, 0x60, 0xDF,
  0x28, 0x05, 0x6C, 0xA0, 0x36, 0x50, 0xD2, 0x5C, 0xEC, 0x19, 0xB0, 0x96, 0xFB, 0x53, 0x3D, 0x08,
  0xE3, 0xC3, 0x9A, 0x54, 0xB2, 0x44, 0xD3, 0x96, 0x99, 0xB7, 0xDC, 0xA4, 0xD1, 0x10, 0x1D, 0xF5,
  0x36, 0x76, 0x38, 0x70, 0xC0, 0x3B, 0xBA, 0xDB, 0xB1, 0x09, 0xC8, 0x69, 0x71, 0x78, 0xC5, 0x96,
  0xCA, 0x32, 0x6E, 0xD4, 0x13, 0x9C, 0xFC, 0x61, 0x8C, 0xCF, 0xAA, 0xF2, 0x4C, 0xFB, 0xB4, 0x68,
  0x24, 0xDB, 0x74, 0x0B, 0x6A, 0xE6, 0xFA, 0x7E, 0x95, 0x43, 0xBE, 0x74, 0x5F, 0x64, 0x6B, 0x1C,
  0x6E, 0x0B, 0xCB, 0xCB, 0x65, 0x67, 0x1F, 0x26, 0x24, 0xA9, 0x4D, 0x62, 0x90, 0x2F, 0x13, 0x56,
  0x56, 0xE8, 0x05, 0x65, 0x31, 0x9E, 0x9C, 0x88, 0x00
};

uint8_t decompressed[7460] = {};

uint32_t table1[256 * 4] __asm__(".table1") = {
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000080, 0x000000c0, 0x00000100,
  0x00000200, 0x00009876, 0x00009876, 0x61746146,
  0x7247206c, 0x796e6e61, 0x736e4920, 0x6c6c6174,
  0x6f697461, 0x7245206e, 0x00726f72, 0x68207325,
  0x62207361, 0x206e6565, 0x6f636e69, 0x63657272,
  0x20796c74, 0x74736e69, 0x656c6c61, 0x73612064,
  0x2e732520, 0x6f542020, 0x6f766120, 0x76206469,
  0x69737265, 0x6e696e6f, 0x72702067, 0x656c626f,
  0x202c736d, 0x6d207325, 0x20747375, 0x61776c61,
  0x62207379, 0x6e692065, 0x6c617473, 0x2064656c,
  0x61206e69, 0x7061206e, 0x63696c70, 0x6f697461,
  0x70732d6e, 0x66696365, 0x64206369, 0x63657269,
  0x79726f74, 0x6e61202c, 0x656e2064, 0x20726576,
  0x61206e69, 0x73797320, 0x206d6574, 0x65726964,
  0x726f7463, 0x00002e79, 0x00000080, 0x00000100,
  0x00000200, 0x00000400, 0x00000200, 0x00000400,
  0x00000800, 0x00000c00, 0x50066cfc, 0x5005d000,
  0x5005d040, 0x5005d080, 0x5005d0c0, 0x5005d100,
  0x5005d140, 0x5005d180, 0x5005d1c0, 0x5005d200,
  0x5005d240, 0x5005d660, 0x5005d6a0, 0x5005d938,
  0x5005d898, 0x5005db00, 0x5005db80, 0x5005dbc0,
  0x5005dc20, 0x5005dca0, 0x5005dd40, 0x5005dde0,
  0x5005de80, 0x5005df40, 0x5005e000, 0x5005e0a0,
  0x5005e140, 0x5005e1a0, 0x5005e220, 0x5005e2a0,
  0x50066d90, 0x5005e530, 0x5005e53c, 0x5005e54c,
  0x5005e570, 0x50066d9c, 0x5005ead8, 0x50053278,
  0x5005329c, 0x500532c0, 0x500532e4, 0x50053308,
  0x5005332c, 0x50053350, 0x50053374, 0x50053398,
  0x500533bc, 0x500533e0, 0x50053404, 0x50053428,
  0x5005eef0, 0x5005f2b0, 0x50060798, 0x50053714,
  0x50053734, 0x50060ef8, 0x500627f8, 0x50062898,
  0x500628d8, 0x50062938, 0x50062f10, 0x50063150,
  0x50063190, 0x500631d0, 0x500632d0, 0x50063a40,
  0x50063b08, 0x50063b68, 0x50063ba8, 0x50064000,
  0x50064080, 0x50064120, 0x50064180, 0x500641e0,
  0x5006473c, 0x5007f710, 0x50064868, 0x500648e8,
  0x50064988, 0x50064cb8, 0x500650d0, 0x50065170,
  0x500651f0, 0x50065230, 0x50065290, 0x500652f0,
  0x50065370, 0x50065410, 0x50065570, 0x500655f0,
  0x500656b0, 0x50065730, 0x500657f0, 0x50065870,
  0x50065910, 0x500659d0, 0x50065a90, 0x50065b30,
  0x50065c10, 0x50065cb0, 0x50065d70, 0x50065e50,
  0x50065f30, 0x50065ff0, 0x500660f0, 0x50066190,
  0x50066250, 0x50066330, 0x50066410, 0x500664d0,
  0x500665d0, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
  0x00000000, 0x00000000, 0x00000000, 0x00000000,
};

struct struct_0;
struct struct_1;
struct struct_2;

extern "C" {
__asm__("asm_0x50039b50:\n"
        "mov     ecx, [esp+4]\n"
        "ret     0\n");

void* asm_0x50030000(char* filename, uint32_t line, uint32_t alignment, uint32_t size) {
  void* p = aligned_alloc(alignment, size);

  __asm__("mov eax, %0\n"
          ::"r" (p));
}

void asm_0x500300d0(char* filename, uint32_t line, void* pointer) { free(pointer); }
uint32_t         asm_0x50046620(struct struct_0* a1, uint8_t* a2);
uint32_t         asm_0x5004cca0(uint32_t a1);
uint32_t         asm_0x5004cc80(uint32_t a1, uint32_t a2);
void             asm_0x500468d0(uint32_t a1, uint32_t* a2, uint32_t* a3, uint32_t* a4);
uint32_t         asm_0x50047990(uint32_t a1, uint32_t a2, uint32_t a3);
struct struct_2* asm_0x5004ccc0(struct struct_2* a1, uint32_t a2, uint32_t a3, uint16_t a4);
struct struct_1* asm_0x50047a00(struct struct_1* a1, uint32_t* a2, uint32_t a3);
void             asm_0x50046680(struct struct_0* a1);
uint32_t         asm_0x50046780(struct struct_0* a1, uint8_t a2, uint32_t a3);
struct struct_0* asm_0x500466e0(struct struct_0* a1, uint32_t a2, uint32_t a3, uint32_t a4);
uint32_t         asm_0x50046720(struct struct_0* a1, uint32_t a2);
uint32_t         asm_0x500467b0(struct struct_0* a1, uint8_t a2, uint32_t a3);
uint32_t         asm_0x50047d70(uint8_t* a1, uint8_t* a2, uint32_t a3);
void             asm_0x50030680(size_t a1, uint32_t* a2);
uint32_t         asm_0x5004d090(struct struct_2* a1);
uint32_t         asm_0x5004d4b0(uint32_t* a1, uint32_t a2);
void             asm_0x5004d3a0(struct struct_2* a1);
uint32_t         asm_0x50047bd0(uint32_t a1, uint32_t a2, uint32_t a3);
uint32_t         asm_0x50034970(uint32_t a1, uint32_t a2, void* a3, uint32_t a4, uint32_t a5, uint32_t a6, void* a7);
uint16_t*        asm_0x5004d140(struct struct_2* a1, struct struct_0* a2);
}

int main() {
  asm_0x50034970(0, sizeof(compressed), compressed, 0x165c, 0x165c, sizeof(decompressed), decompressed);
}

__asm__("asm_0x50046620:\n"

        "mov     edx, [esp+8]\n"
        "mov     ecx, [esp+4]\n"
        "lea     eax, [edx+1]\n"
        "mov     [ecx+8], eax\n"
        "movzx   eax, byte ptr [edx]\n"
        "push    esi\n"
        "mov     esi, eax\n"
        "and     esi, 1\n"
        "add     esi, edx\n"
        "shr     eax, 1\n"
        "mov     [ecx+16], esi\n"
        "mov     [ecx], eax\n"
        "mov     dword ptr [ecx+4], 128\n"
        "pop     esi\n"

        "ret     0\n");

__asm__("asm_0x5004cca0:\n"

        "mov     eax, [esp+4]\n"
        "add     eax, 5\n"
        "and     eax, 4294967292\n"
        "lea     ecx, [eax+eax*2]\n"
        "lea     eax, [ecx+ecx+92]\n"

        "ret     0\n");

__asm__("asm_0x5004cc80:\n"

        "mov     eax, [esp+8]\n"
        "mov     ecx, [esp+4]\n"
        "add     eax, 5\n"
        "add     ecx, 5\n"
        "and     eax, 4294967292\n"
        "and     ecx, 4294967292\n"
        "lea     eax, [ecx+eax*2+46]\n"
        "shl     eax, 1\n"

        "ret     0\n");

__asm__("asm_0x500468d0:\n"

        "mov     ecx, [esp+4]\n"
        "cmp     ecx, 4\n"
        "mov     eax, 4\n"
        "jnb     short .L0001\n"
        "lea     eax, [ecx+1]\n"

        ".L0001:\n"
        "mov     edx, [esp+8]\n"
        "mov     [edx], eax\n"
        "mov     eax, ecx\n"
        "shr     eax, 2\n"
        "cmp     eax, 256\n"
        "jb      short .L0002\n"
        "mov     edx, [esp+12]\n"
        "mov     eax, 256\n"
        "mov     [edx], eax\n"
        "mov     eax, [esp+16]\n"
        "shr     ecx, 10\n"
        "inc     ecx\n"
        "mov     [eax], ecx\n"
        "jmp     short .L0003\n"

        ".L0002:\n"
        "mov     edx, [esp+12]\n"
        "inc     eax\n"
        "mov     [edx], eax\n"
        "mov     eax, [esp+16]\n"
        "shr     ecx, 10\n"
        "inc     ecx\n"
        "mov     [eax], ecx\n"

        ".L0003:\n"

        "ret     0\n");

__asm__("asm_0x50047990:\n"

        "sub     esp, 8\n"
        "push    esi\n"
        "lea     eax, [esp+8]\n"
        "push    eax\n"
        "mov     eax, [esp+28]\n"
        "lea     ecx, [esp+8]\n"
        "push    ecx\n"
        "lea     edx, [esp+32]\n"
        "push    edx\n"
        "push    eax\n"
        "call    asm_0x500468d0\n"
        "mov     ecx, [esp+36]\n"
        "push    ecx\n"
        "call    asm_0x5004cca0\n"
        "push    65\n"
        "mov     esi, eax\n"
        "call    asm_0x5004cca0\n"
        "imul    eax, 65\n"
        "mov     edx, [esp+48]\n"
        "push    edx\n"
        "lea     esi, [eax+esi*4+1336]\n"
        "call    asm_0x5004cca0\n"
        "add     esi, eax\n"
        "mov     eax, [esp+32]\n"
        "push    eax\n"
        "call    asm_0x5004cca0\n"
        "mov     ecx, eax\n"
        "mov     eax, [esp+40]\n"
        "imul    ecx, eax\n"
        "push    eax\n"
        "add     esi, ecx\n"
        "call    asm_0x5004cca0\n"
        "add     esp, 36\n"
        "add     eax, esi\n"
        "pop     esi\n"
        "add     esp, 8\n"

        "ret     0\n");

__asm__("asm_0x5004ccc0:\n"

        "mov     edx, [esp+4]\n"
        "test    edx, edx\n"
        "jz      .L0107\n"
        "mov     eax, [esp+8]\n"
        "test    eax, eax\n"
        "push    ebx\n"
        "mov     ebx, [esp+16]\n"
        "push    esi\n"
        "mov     esi, [esp+24]\n"
        "push    esi\n"
        "jz      short .L0101\n"
        "push    ebx\n"
        "call    asm_0x5004cc80\n"
        "add     esp, 8\n"
        "jmp     short .L0102\n"

        ".L0101:\n"
        "call    asm_0x5004cca0\n"
        "add     esp, 4\n"

        ".L0102:\n"
        "mov     ecx, eax\n"
        "xor     eax, eax\n"
        "push    ebp\n"
        "mov     ebp, ecx\n"
        "push    edi\n"
        "shr     ecx, 2\n"
        "mov     edi, edx\n"
        "rep stosd\n"
        "mov     ecx, ebp\n"
        "and     ecx, 3\n"
        "rep stosb\n"
        "lea     eax, [esi+5]\n"
        "and     eax, 4294967292\n"
        "lea     ecx, [edx+eax*2+92]\n"
        "lea     eax, [ecx+eax*2]\n"
        "mov     [edx+16], eax\n"
        "mov     eax, [esp+24]\n"
        "mov     [edx+28], eax\n"
        "mov     eax, 49152\n"
        "mov     [edx+82], ax\n"
        "mov     [edx+84], ax\n"
        "mov     [edx+86], ax\n"
        "mov     [edx+88], ax\n"
        "mov     [edx+90], ax\n"
        "mov     eax, ebx\n"
        "shl     eax, 5\n"
        "cmp     eax, 256\n"
        "mov     [edx+20], ecx\n"
        "mov     [edx+14], si\n"
        "mov     word ptr [edx], 4\n"
        "mov     word ptr [edx+80], 32768\n"
        "mov     word ptr [ecx], 4\n"
        "pop     edi\n"
        "mov     word ptr [edx+2], 8\n"
        "mov     word ptr [edx+6], 4\n"
        "pop     ebp\n"
        "jnb     short .L0103\n"
        "mov     eax, 256\n"
        "jmp     short .L0104\n"

        ".L0103:\n"
        "cmp     eax, 15160\n"
        "jbe     short .L0104\n"
        "mov     eax, 15160\n"

        ".L0104:\n"
        "mov     [edx+8], ax\n"
        "lea     eax, [ebx+ebx]\n"
        "cmp     eax, 128\n"
        "pop     esi\n"
        "pop     ebx\n"
        "jnb     short .L0105\n"
        "mov     eax, 128\n"
        "mov     [edx+4], ax\n"
        "mov     eax, edx\n"
        "jmp     .L0108\n"

        ".L0105:\n"
        "movzx   ecx, word ptr [edx+8]\n"
        "shr     ecx, 1\n"
        "add     ecx, 4294967264\n"
        "cmp     eax, ecx\n"
        "jb      short .L0106\n"
        "mov     eax, ecx\n"

        ".L0106:\n"
        "mov     [edx+4], ax\n"

        ".L0107:\n"
        "mov     eax, edx\n"

        ".L0108:\n"

        "ret     0\n");

__asm__("asm_0x50047a00:\n"

        "sub     esp, 8\n"
        "push    ebx\n"
        "mov     ebx, [esp+16]\n"
        "push    ebp\n"
        "push    esi\n"
        "mov     esi, [esp+28]\n"
        "mov     eax, [esi]\n"
        "push    edi\n"
        "and     eax, 511\n"
        "lea     ecx, [ebx+1324]\n"
        "push    ecx\n"
        "mov     [ebx+1308], eax\n"
        "mov     eax, [esi]\n"
        "lea     edx, [ebx+1320]\n"
        "push    edx\n"
        "shr     eax, 9\n"
        "lea     edi, [ebx+1316]\n"
        "push    edi\n"
        "push    eax\n"
        "mov     [ebx+1312], eax\n"
        "call    asm_0x500468d0\n"
        "xor     ebp, ebp\n"
        "mov     [ebx+1332], ebp\n"
        "mov     [ebx+1328], ebp\n"
        "mov     edi, [esi+4]\n"
        "and     edi, 511\n"
        "push    edi\n"
        "lea     esi, [ebx+1336]\n"
        "call    asm_0x5004cca0\n"
        "add     esp, 20\n"
        "mov     [esp+28], eax\n"
        "lea     esp, [esp+0]\n"

        ".L0201:\n"
        "mov     ecx, [ebx+1308]\n"
        "push    edi\n"
        "dec     ecx\n"
        "push    ecx\n"
        "push    0\n"
        "push    esi\n"
        "call    asm_0x5004ccc0\n"
        "mov     edx, [esp+44]\n"
        "add     esp, 16\n"
        "add     esi, edx\n"
        "mov     [ebx+ebp*4], eax\n"
        "inc     ebp\n"
        "cmp     ebp, 3\n"
        "jbe     short .L0201\n"
        "mov     dword ptr [esp+16], 0\n"
        "lea     ebp, [ebx+16]\n"
        "mov     edi, edi\n"

        ".L0202:\n"
        "mov     edi, [esp+16]\n"
        "mov     edx, [esp+32]\n"
        "mov     ecx, 24\n"
        "sub     ecx, edi\n"
        "mov     edi, [edx+8]\n"
        "shr     edi, cl\n"
        "and     edi, 255\n"
        "push    edi\n"
        "call    asm_0x5004cca0\n"
        "add     esp, 4\n"
        "mov     [esp+28], eax\n"
        "mov     dword ptr [esp+20], 16\n"
        "nop\n"

        ".L0203:\n"
        "push    edi\n"
        "push    64\n"
        "push    0\n"
        "push    esi\n"
        "call    asm_0x5004ccc0\n"
        "mov     edx, [esp+44]\n"
        "mov     [ebp+0], eax\n"
        "mov     eax, [esp+36]\n"
        "add     esp, 16\n"
        "add     esi, edx\n"
        "add     ebp, 4\n"
        "dec     eax\n"
        "mov     [esp+20], eax\n"
        "jnz     short .L0203\n"
        "mov     eax, [esp+16]\n"
        "add     eax, 8\n"
        "cmp     eax, 32\n"
        "mov     [esp+16], eax\n"
        "jb      short .L0202\n"
        "push    edi\n"
        "push    64\n"
        "push    0\n"
        "push    esi\n"
        "call    asm_0x5004ccc0\n"
        "mov     edi, [esp+44]\n"
        "mov     [ebx+272], eax\n"
        "mov     eax, [ebx+1320]\n"
        "push    eax\n"
        "add     esi, edi\n"
        "call    asm_0x5004cca0\n"
        "mov     [esp+48], eax\n"
        "mov     eax, [ebx+1324]\n"
        "add     esp, 20\n"
        "xor     edi, edi\n"
        "test    eax, eax\n"
        "jbe     short .L0205\n"
        "lea     ebp, [ebx+284]\n"

        ".L0204:\n"
        "mov     eax, [ebx+1320]\n"
        "push    eax\n"
        "dec     eax\n"
        "push    eax\n"
        "push    0\n"
        "push    esi\n"
        "call    asm_0x5004ccc0\n"
        "mov     [ebp+0], eax\n"
        "add     esi, [esp+44]\n"
        "mov     eax, [ebx+1324]\n"
        "add     esp, 16\n"
        "inc     edi\n"
        "add     ebp, 4\n"
        "cmp     edi, eax\n"
        "jb      short .L0204\n"

        ".L0205:\n"
        "mov     eax, [ebx+1316]\n"
        "push    eax\n"
        "dec     eax\n"
        "push    eax\n"
        "push    0\n"
        "push    esi\n"
        "call    asm_0x5004ccc0\n"
        "mov     ecx, [esp+48]\n"
        "mov     [ebx+276], eax\n"
        "mov     edx, [ecx+4]\n"
        "mov     eax, [ebx+1324]\n"
        "mov     ecx, [ebx+1316]\n"
        "add     esp, 16\n"
        "shr     edx, 19\n"
        "inc     edx\n"
        "push    edx\n"
        "dec     eax\n"
        "push    eax\n"
        "push    0\n"
        "push    ecx\n"
        "call    asm_0x5004cca0\n"
        "add     eax, esi\n"
        "add     esp, 4\n"
        "push    eax\n"
        "call    asm_0x5004ccc0\n"
        "add     esp, 16\n"
        "pop     edi\n"
        "pop     esi\n"
        "mov     [ebx+280], eax\n"
        "pop     ebp\n"
        "mov     eax, ebx\n"
        "pop     ebx\n"
        "add     esp, 8\n"

        "ret     0\n");

__asm__("asm_0x50046680:\n"

        "mov     edx, [esp+4]\n"
        "push    edi\n"
        "mov     edi, [edx+4]\n"
        "cmp     edi, 8388608\n"
        "ja      short .L0302\n"
        "mov     ecx, [edx]\n"
        "push    ebx\n"
        "mov     ebx, [edx+16]\n"
        "push    ebp\n"
        "mov     eax, ebx\n"
        "push    esi\n"
        "mov     esi, [edx+8]\n"
        "and     eax, 1\n"

        ".L0301:\n"
        "lea     ecx, [eax+ecx*2]\n"
        "movzx   eax, byte ptr [esi]\n"
        "mov     ebp, eax\n"
        "shl     ecx, 7\n"
        "shr     ebp, 1\n"
        "shl     edi, 8\n"
        "inc     esi\n"
        "or      ecx, ebp\n"
        "and     eax, 1\n"
        "cmp     edi, 8388608\n"
        "jbe     short .L0301\n"
        "and     ebx, 4294967294\n"
        "mov     [edx+8], esi\n"
        "pop     esi\n"
        "add     ebx, eax\n"
        "pop     ebp\n"
        "mov     [edx+16], ebx\n"
        "mov     [edx], ecx\n"
        "mov     [edx+4], edi\n"
        "pop     ebx\n"

        ".L0302:\n"
        "pop     edi\n"

        "ret     0\n");

__asm__("asm_0x50046780:\n"

        "push    esi\n"
        "mov     esi, [esp+8]\n"
        "push    edi\n"
        "push    esi\n"
        "call    asm_0x50046680\n"
        "mov     edi, [esi+4]\n"
        "mov     ecx, [esp+20]\n"
        "mov     eax, [esi]\n"
        "shr     edi, cl\n"
        "xor     edx, edx\n"
        "mov     ecx, [esp+24]\n"
        "add     esp, 4\n"
        "div     edi\n"
        "mov     [esi+12], edi\n"
        "pop     edi\n"
        "pop     esi\n"
        "cmp     eax, ecx\n"
        "jb      short .L0401\n"
        "lea     eax, [ecx-1]\n"

        ".L0401:\n"

        "ret     0\n");

__asm__("asm_0x500466e0:\n"

        "mov     eax, [esp+4]\n"
        "mov     edx, [eax+12]\n"
        "push    ebx\n"
        "mov     ebx, [esp+20]\n"
        "push    esi\n"
        "mov     esi, [esp+16]\n"
        "mov     ecx, edx\n"
        "imul    ecx, esi\n"
        "push    edi\n"
        "sub     [eax], ecx\n"
        "mov     edi, [esp+24]\n"
        "add     esi, edi\n"
        "cmp     esi, ebx\n"
        "jnb     short .L0501\n"
        "imul    edx, edi\n"
        "pop     edi\n"
        "pop     esi\n"
        "mov     [eax+4], edx\n"
        "pop     ebx\n"
        "jmp     .L0502\n"

        ".L0501:\n"
        "mov     edx, [eax+4]\n"
        "pop     edi\n"
        "sub     edx, ecx\n"
        "pop     esi\n"
        "mov     [eax+4], edx\n"
        "pop     ebx\n"

        ".L0502:\n"

        "ret     0\n");

__asm__("asm_0x50046720:\n"

        "push    ebx\n"
        "push    ebp\n"
        "push    esi\n"
        "mov     esi, [esp+16]\n"
        "push    edi\n"
        "push    esi\n"
        "call    asm_0x50046680\n"
        "mov     edi, [esi+4]\n"
        "mov     ebx, [esp+28]\n"
        "xor     edx, edx\n"
        "mov     eax, edi\n"
        "div     ebx\n"
        "mov     ecx, [esi]\n"
        "xor     edx, edx\n"
        "add     esp, 4\n"
        "mov     ebp, eax\n"
        "mov     eax, ecx\n"
        "div     ebp\n"
        "cmp     eax, ebx\n"
        "jb      short .L0701\n"
        "lea     eax, [ebx-1]\n"

        ".L0701:\n"
        "mov     edx, eax\n"
        "imul    edx, ebp\n"
        "sub     ecx, edx\n"
        "mov     [esi], ecx\n"
        "lea     ecx, [eax+1]\n"
        "cmp     ecx, ebx\n"
        "jnb     short .L0702\n"
        "pop     edi\n"
        "mov     [esi+4], ebp\n"
        "pop     esi\n"
        "pop     ebp\n"
        "pop     ebx\n"
        "jmp     .L0703\n"

        ".L0702:\n"
        "sub     edi, edx\n"
        "mov     [esi+4], edi\n"
        "pop     edi\n"
        "pop     esi\n"
        "pop     ebp\n"
        "pop     ebx\n"

        ".L0703:\n"

        "ret     0\n");

__asm__("asm_0x500467b0:\n"

        "push    ebx\n"
        "push    ebp\n"
        "push    esi\n"
        "push    edi\n"
        "mov     edi, [esp+20]\n"
        "push    edi\n"
        "call    asm_0x50046680\n"
        "mov     ebx, [edi+4]\n"
        "mov     ecx, [esp+28]\n"
        "mov     esi, ebx\n"
        "shr     esi, cl\n"
        "mov     ecx, [edi]\n"
        "xor     edx, edx\n"
        "mov     eax, ecx\n"
        "div     esi\n"
        "mov     ebp, [esp+32]\n"
        "add     esp, 4\n"
        "cmp     eax, ebp\n"
        "jb      short .L0801\n"
        "lea     eax, [ebp-1]\n"

        ".L0801:\n"
        "mov     edx, eax\n"
        "imul    edx, esi\n"
        "sub     ecx, edx\n"
        "mov     [edi], ecx\n"
        "lea     ecx, [eax+1]\n"
        "cmp     ecx, ebp\n"
        "jnb     short .L0802\n"
        "mov     [edi+4], esi\n"
        "pop     edi\n"
        "pop     esi\n"
        "pop     ebp\n"
        "pop     ebx\n"
        "jmp     .L0803\n"

        ".L0802:\n"
        "sub     ebx, edx\n"
        "mov     [edi+4], ebx\n"
        "pop     edi\n"
        "pop     esi\n"
        "pop     ebp\n"
        "pop     ebx\n"

        ".L0803:\n"

        "ret     0\n");

__asm__("asm_0x50047d70:\n"

        "mov     eax, [esp+12]\n"
        "cmp     eax, 4\n"
        "mov     edx, [esp+8]\n"
        "mov     ecx, [esp+4]\n"
        "push    esi\n"
        "mov     esi, edx\n"
        "jb      short .L01302\n"
        "sub     edx, ecx\n"
        "cmp     edx, 4\n"
        "jl      short .L01302\n"
        "nop\n"
        "lea     esp, [esp+0]\n"

        ".L01301:\n"
        "mov     edx, [esi]\n"
        "sub     eax, 4\n"
        "mov     [ecx], edx\n"
        "add     ecx, 4\n"
        "add     esi, 4\n"
        "cmp     eax, 4\n"
        "ja      short .L01301\n"
        "test    eax, eax\n"
        "jz      short .L01303\n"

        ".L01302:\n"
        "mov     dl, [esi]\n"
        "dec     eax\n"
        "mov     [ecx], dl\n"
        "inc     ecx\n"
        "inc     esi\n"
        "test    eax, eax\n"
        "jnz     short .L01302\n"

        ".L01303:\n"
        "pop     esi\n"

        "ret     0\n");

__asm__("asm_0x50030680:\n"

        "mov     eax, [esp+4]\n"
        "mov     ecx, [esp+8]\n"
        "cdq\n"
        "and     edx, 3\n"
        "add     eax, edx\n"
        "sar     eax, 2\n"
        "test    eax, eax\n"
        "jz      short .L01502\n"
        "push    esi\n"
        "mov     edx, eax\n"
        "push    edi\n"
        "lea     esp, [esp+0]\n"

        ".L01501:\n"
        "mov     eax, [ecx]\n"
        "mov     esi, eax\n"
        "and     esi, 16711680\n"
        "mov     edi, eax\n"
        "shr     edi, 16\n"
        "or      esi, edi\n"
        "mov     edi, eax\n"
        "and     edi, 65280\n"
        "shl     eax, 16\n"
        "or      edi, eax\n"
        "shr     esi, 8\n"
        "shl     edi, 8\n"
        "or      esi, edi\n"
        "mov     [ecx], esi\n"
        "add     ecx, 4\n"
        "dec     edx\n"
        "jnz     short .L01501\n"
        "pop     edi\n"
        "pop     esi\n"

        ".L01502:\n"

        "ret     0\n");

__asm__("asm_0x5004d090:\n"

        "mov     ecx, [esp+4]\n"
        "push    ebx\n"
        "push    esi\n"
        "movzx   esi, word ptr [ecx]\n"
        "mov     eax, 131072\n"
        "cdq\n"
        "idiv    esi\n"
        "mov     edx, [ecx+20]\n"
        "movzx   edx, word ptr [edx]\n"
        "push    edi\n"
        "mov     word ptr [ecx+80], 32768\n"
        "mov     esi, 1\n"
        "lea     edi, [ecx+82]\n"
        "imul    edx, eax\n"
        "shr     edx, 3\n"
        "add     edx, 32768\n"

        ".L01001:\n"
        "mov     [edi], dx\n"
        "movzx   ebx, word ptr [ecx+10]\n"
        "cmp     esi, ebx\n"
        "ja      short .L01002\n"
        "mov     ebx, [ecx+20]\n"
        "movzx   ebx, word ptr [ebx+esi*2]\n"
        "imul    ebx, eax\n"
        "shr     ebx, 3\n"
        "add     edx, ebx\n"
        "inc     esi\n"
        "add     edi, 2\n"
        "jmp     short .L01001\n"

        ".L01002:\n"
        "mov     dx, [ecx+4]\n"
        "movzx   eax, word ptr [ecx+6]\n"
        "xor     esi, esi\n"
        "mov     si, dx\n"
        "shl     eax, 1\n"
        "pop     edi\n"
        "cmp     eax, esi\n"
        "pop     esi\n"
        "pop     ebx\n"
        "jbe     short .L01003\n"
        "mov     ax, [ecx]\n"
        "add     ax, dx\n"
        "mov     [ecx+2], ax\n"
        "mov     ax, [ecx+10]\n"
        "mov     [ecx+12], ax\n"
        "movzx   eax, ax\n"
        "mov     word ptr [ecx+eax*2+82], 49152\n"
        "jmp     .L01004\n"

        ".L01003:\n"
        "mov     dx, [ecx]\n"
        "mov     [ecx+6], ax\n"
        "add     dx, ax\n"
        "mov     ax, [ecx+10]\n"
        "mov     [ecx+12], ax\n"
        "movzx   eax, ax\n"
        "mov     [ecx+2], dx\n"
        "mov     word ptr [ecx+eax*2+82], 49152\n"

        ".L01004:\n"

        "ret     0\n");

__asm__("asm_0x5004d4b0:\n"

        "push    ebp\n"
        "mov     ebp, esp\n"
        "sub     esp, 8\n"
        "mov     edx, [ebp+8]\n"
        "mov     eax, [ebp+12]\n"
        "push    ebx\n"
        "xor     ebx, ebx\n"
        "mov     ecx, edx\n"
        "inc     eax\n"

        ".L0901:\n"
        "inc     eax\n"
        "shr     eax, 1\n"
        "mov     [ecx], eax\n"
        "inc     ebx\n"
        "add     ecx, 4\n"
        "cmp     eax, 4\n"
        "ja      short .L0901\n"
        "dec     ebx\n"
        "jz      short .L0903\n"
        "lea     eax, [ebx*4+0]\n"
        "mov     [ebp-8], eax\n"
        "lea     ecx, [edx+4]\n"
        "mov     eax, 14\n"
        "sub     eax, ebx\n"
        "mov     [ebp+12], ecx\n"
        "push    esi\n"
        "lea     ecx, [edx+eax*4]\n"
        "push    edi\n"
        "mov     [ebp-4], ecx\n"
        "mov     ecx, [ebp-8]\n"
        "mov     edi, [ebp-4]\n"
        "mov     esi, [ebp+12]\n"
        "std\n"
        "mov     edx, ecx\n"
        "lea     esi, [esi+ecx-4]\n"
        "lea     edi, [edi+ecx-4]\n"
        "shr     ecx, 2\n"
        "rep movsd\n"
        "and     edx, 3\n"
        "jz      short .L0902\n"
        "add     esi, 3\n"
        "add     edi, 3\n"
        "mov     ecx, edx\n"
        "rep movsb\n"

        ".L0902:\n"
        "cld\n"
        "mov     edx, [ebp+8]\n"
        "pop     edi\n"
        "pop     esi\n"

        ".L0903:\n"
        "mov     eax, [edx]\n"
        "mov     [edx], ebx\n"
        "mov     [edx+4], eax\n"
        "pop     ebx\n"
        "mov     esp, ebp\n"
        "pop     ebp\n"

        "ret     0\n");

__asm__("asm_0x5004d3a0:\n"

        "mov     eax, [esp+4]\n"
        "mov     ecx, [eax+20]\n"
        "shr     word ptr [ecx], 1\n"
        "mov     edx, [eax+20]\n"
        "mov     cx, [edx]\n"
        "push    ebx\n"
        "push    esi\n"
        "mov     [eax], cx\n"
        "push    edi\n"
        "mov     ecx, 1\n"
        "xor     ebx, ebx\n"
        "or      edi, 4294967295\n"
        "cmp     [eax+10], cx\n"
        "jb      .L01107\n"
        "lea     ebx, [ebx+0]\n"

        ".L01101:\n"
        "cmp     word ptr [edx+ecx*2], 1\n"
        "ja      short .L01103\n"

        ".L01102:\n"
        "movzx   esi, word ptr [eax+10]\n"
        "cmp     ecx, esi\n"
        "jnb     short .L01105\n"
        "mov     si, [edx+esi*2]\n"
        "mov     [edx+ecx*2], si\n"
        "movzx   edx, word ptr [eax+10]\n"
        "mov     esi, [eax+20]\n"
        "mov     word ptr [esi+edx*2], 0\n"
        "movzx   esi, word ptr [eax+10]\n"
        "mov     edx, [eax+16]\n"
        "mov     si, [edx+esi*2]\n"
        "mov     [edx+ecx*2], si\n"
        "mov     edx, [eax+20]\n"
        "dec     word ptr [eax+10]\n"
        "cmp     word ptr [edx+ecx*2], 1\n"
        "jbe     short .L01102\n"

        ".L01103:\n"
        "mov     edx, [eax+20]\n"
        "shr     word ptr [edx+ecx*2], 1\n"
        "lea     edx, [edx+ecx*2]\n"
        "mov     edx, [eax+20]\n"
        "mov     si, [edx+ecx*2]\n"
        "add     [eax], si\n"
        "movzx   esi, word ptr [edx+ecx*2]\n"
        "cmp     esi, ebx\n"
        "jbe     short .L01104\n"
        "mov     ebx, esi\n"
        "mov     edi, ecx\n"

        ".L01104:\n"
        "movzx   esi, word ptr [eax+10]\n"
        "inc     ecx\n"
        "cmp     ecx, esi\n"
        "jbe     short .L01101\n"
        "jmp     short .L01106\n"

        ".L01105:\n"
        "mov     edx, [eax+20]\n"
        "mov     word ptr [edx+ecx*2], 0\n"
        "dec     word ptr [eax+10]\n"

        ".L01106:\n"
        "test    ebx, ebx\n"
        "jz      short .L01107\n"
        "mov     cx, [eax+10]\n"
        "test    cx, cx\n"
        "jz      short .L01107\n"
        "movzx   ecx, cx\n"
        "cmp     edi, ecx\n"
        "jz      short .L01107\n"
        "mov     edx, [eax+20]\n"
        "movzx   esi, word ptr [edx+ecx*2]\n"
        "mov     bx, [edx+edi*2]\n"
        "mov     [edx+ecx*2], bx\n"
        "mov     edx, [eax+20]\n"
        "mov     [edx+edi*2], si\n"
        "mov     edx, [eax+16]\n"
        "movzx   esi, word ptr [edx+ecx*2]\n"
        "mov     bx, [edx+edi*2]\n"
        "mov     [edx+ecx*2], bx\n"
        "mov     ecx, [eax+16]\n"
        "mov     [ecx+edi*2], si\n"

        ".L01107:\n"
        "mov     dx, [eax+10]\n"
        "cmp     dx, [eax+14]\n"
        "pop     edi\n"
        "pop     esi\n"
        "pop     ebx\n"
        "jz      short .L01108\n"
        "mov     ecx, [eax+20]\n"
        "cmp     word ptr [ecx], 0\n"
        "jnz     short .L01108\n"
        "mov     word ptr [ecx], 1\n"
        "inc     word ptr [eax]\n"

        ".L01108:\n"

        "ret     0\n");

__asm__("asm_0x50047bd0:\n"

        "push    ecx\n"
        "push    ebx\n"
        "push    ebp\n"
        "mov     ebp, [esp+20]\n"
        "push    esi\n"
        "push    edi\n"
        "mov     edi, [esp+24]\n"
        "mov     eax, [edi+1332]\n"
        "mov     ecx, [edi+eax*4+16]\n"
        "push    ebp\n"
        "push    ecx\n"
        "call    asm_0x5004d140\n"
        "mov     esi, eax\n"
        "add     esp, 8\n"
        "cmp     esi, 65536\n"
        "jbe     short .L01201\n"
        "push    65\n"
        "push    ebp\n"
        "call    asm_0x50046720\n"
        "mov     [esi], ax\n"
        "add     esp, 8\n"
        "mov     esi, eax\n"

        ".L01201:\n"
        "test    esi, esi\n"
        "mov     [edi+1332], esi\n"
        "jz      .L01210\n"
        "mov     ebx, [edi+1312]\n"
        "mov     eax, [edi+1328]\n"
        "cmp     ebx, eax\n"
        "mov     [esp+24], ebx\n"
        "jbe     short .L01202\n"
        "mov     [esp+24], eax\n"
        "mov     ebx, eax\n"

        ".L01202:\n"
        "cmp     esi, 61\n"
        "jb      short .L01203\n"
        "mov     edx, [esi*4+.table1]\n"
        "mov     [esp+28], edx\n"
        "jmp     short .L01204\n"

        ".L01203:\n"
        "inc     esi\n"
        "mov     [esp+28], esi\n"

        ".L01204:\n"
        "mov     eax, [edi+276]\n"
        "push    ebp\n"
        "push    eax\n"
        "call    asm_0x5004d140\n"
        "mov     esi, eax\n"
        "add     esp, 8\n"
        "cmp     esi, 65536\n"
        "jbe     short .L01205\n"
        "mov     ecx, [edi+1316]\n"
        "push    ecx\n"
        "push    ebp\n"
        "call    asm_0x50046720\n"
        "mov     [esi], ax\n"
        "add     esp, 8\n"
        "mov     esi, eax\n"

        ".L01205:\n"
        "mov     edx, [edi+280]\n"
        "push    ebp\n"
        "inc     esi\n"
        "push    edx\n"
        "mov     [esp+24], esi\n"
        "call    asm_0x5004d140\n"
        "mov     esi, eax\n"
        "add     esp, 8\n"
        "cmp     esi, 65536\n"
        "jbe     short .L01206\n"
        "shr     ebx, 10\n"
        "inc     ebx\n"
        "push    ebx\n"
        "push    ebp\n"
        "call    asm_0x50046720\n"
        "mov     [esi], ax\n"
        "add     esp, 8\n"
        "mov     esi, eax\n"

        ".L01206:\n"
        "mov     eax, [edi+esi*4+284]\n"
        "push    ebp\n"
        "push    eax\n"
        "call    asm_0x5004d140\n"
        "mov     ebx, eax\n"
        "add     esp, 8\n"
        "cmp     ebx, 65536\n"
        "jbe     short .L01209\n"
        "mov     eax, [esp+24]\n"
        "cmp     eax, 1024\n"
        "jb      short .L01207\n"
        "mov     eax, 256\n"
        "jmp     short .L01208\n"

        ".L01207:\n"
        "shr     eax, 2\n"
        "inc     eax\n"

        ".L01208:\n"
        "push    eax\n"
        "push    ebp\n"
        "call    asm_0x50046720\n"
        "mov     [ebx], ax\n"
        "add     esp, 8\n"
        "mov     ebx, eax\n"

        ".L01209:\n"
        "mov     eax, [edi+1328]\n"
        "mov     ebp, [esp+28]\n"
        "add     eax, ebp\n"
        "shl     esi, 8\n"
        "mov     [edi+1328], eax\n"
        "mov     eax, [esp+32]\n"
        "add     esi, ebx\n"
        "shl     esi, 2\n"
        "mov     ecx, eax\n"
        "sub     ecx, esi\n"
        "mov     esi, [esp+16]\n"
        "push    ebp\n"
        "sub     ecx, esi\n"
        "push    ecx\n"
        "push    eax\n"
        "call    asm_0x50047d70\n"
        "add     esp, 12\n"
        "pop     edi\n"
        "pop     esi\n"
        "mov     eax, ebp\n"
        "pop     ebp\n"
        "pop     ebx\n"
        "pop     ecx\n"
        "jmp     .L01299\n"

        ".L01210:\n"
        "mov     esi, [esp+32]\n"
        "mov     edx, esi\n"
        "and     edx, 3\n"
        "mov     eax, [edi+edx*4]\n"
        "push    ebp\n"
        "push    eax\n"
        "call    asm_0x5004d140\n"
        "mov     ebx, eax\n"
        "add     esp, 8\n"
        "cmp     ebx, 65536\n"
        "jbe     short .L01211\n"
        "mov     ecx, [edi+1308]\n"
        "push    ecx\n"
        "push    ebp\n"
        "call    asm_0x50046720\n"
        "mov     [ebx], ax\n"
        "add     esp, 8\n"
        "mov     ebx, eax\n"

        ".L01211:\n"
        "mov     [esi], bl\n"
        "inc     dword ptr [edi+1328]\n"
        "pop     edi\n"
        "pop     esi\n"
        "pop     ebp\n"
        "mov     eax, 1\n"
        "pop     ebx\n"
        "pop     ecx\n"

        ".L01299:\n"

        "ret     0\n");

__asm__("asm_0x50034970:\n"

        "mov     cl, 1\n"
        "sub     esp, 56\n"
        "push    ebx\n"
        "push    ebp\n"
        "mov     al, 1\n"
        "test    al, cl\n"
        "push    esi\n"
        "push    edi\n"
        "jnz     short .L01401\n"
        "mov     bl, cl\n"
        "or      bl, al\n"
        "push    1342582496\n"
        "mov     .D001, bl\n"
        "call    asm_0x50039b50\n"
        "add     esp, 4\n"
        "mov     .D002, eax\n"

        ".L01401:\n"
        "mov     eax, .O001\n"
        "mov     ecx, .D002\n"
        "mov     [esp+36], eax\n"
        "mov     .O001, ecx\n"
        "rdtsc\n"
        "mov     [esp+28], eax\n"
        "mov     [esp+32], edx\n"
        "mov     ecx, [esp+80]\n"
        "mov     edi, [esp+84]\n"
        "lea     eax, [ecx+3]\n"
        "and     eax, 4294967292\n"
        "sub     eax, ecx\n"
        "jz      short .L01403\n"
        "add     ecx, edi\n"

        ".L01402:\n"
        "dec     eax\n"
        "mov     byte ptr [ecx+eax], 0\n"
        "jnz     short .L01402\n"

        ".L01403:\n"
        "mov     al, [esp+76]\n"
        "test    al, al\n"
        "jz      short .L01404\n"
        "push    edi\n"
        "push    36\n"
        "call    asm_0x50030680\n"
        "add     esp, 8\n"

        ".L01404:\n"
        "lea     edx, [edi+36]\n"
        "push    edx\n"
        "lea     eax, [esp+56]\n"
        "push    eax\n"
        "call    asm_0x50046620\n"
        "push    262143\n"
        "push    256\n"
        "push    255\n"
        "call    asm_0x50047990\n"
        "push    eax\n"
        "push    4\n"
        "push    274\n"
        "push    1342582428\n"
        "call    asm_0x50030000\n"
        "mov     ecx, [esp+124]\n"
        "mov     edx, [esp+128]\n"
        "mov     ebx, [esp+136]\n"
        "add     esp, 36\n"
        "mov     [esp+84], eax\n"
        "mov     eax, [esp+96]\n"
        "xor     esi, esi\n"
        "mov     [esp+16], ecx\n"
        "mov     [esp+20], edx\n"
        "mov     [esp+24], eax\n"
        "mov     [esp+76], esi\n"
        "mov     [esp+80], edi\n"

        ".L01405:\n"
        "mov     edx, [esp+80]\n"
        "mov     eax, [esp+84]\n"
        "mov     ecx, [esp+76]\n"
        "mov     edi, [esp+ecx*4+16]\n"
        "push    edx\n"
        "push    eax\n"
        "call    asm_0x50047a00\n"
        "add     esp, 8\n"
        "cmp     esi, edi\n"
        "mov     ebp, eax\n"
        "jge     short .L01407\n"

        ".L01406:\n"
        "push    ebx\n"
        "lea     ecx, [esp+56]\n"
        "push    ecx\n"
        "push    ebp\n"
        "call    asm_0x50047bd0\n"
        "add     esi, eax\n"
        "add     esp, 12\n"
        "add     ebx, eax\n"
        "cmp     esi, edi\n"
        "jl      short .L01406\n"

        ".L01407:\n"
        "mov     eax, [esp+76]\n"
        "mov     edx, [esp+80]\n"
        "inc     eax\n"
        "add     edx, 12\n"
        "cmp     eax, 3\n"
        "mov     [esp+76], eax\n"
        "mov     [esp+80], edx\n"
        "jl      short .L01405\n"
        "mov     edx, [esp+84]\n"
        "push    edx\n"
        "push    311\n"
        "push    1342582428\n"
        "call    asm_0x500300d0\n"
        "add     esp, 12\n"
        "rdtsc\n"
        "mov     [esp+16], eax\n"
        "mov     [esp+20], edx\n"
        "mov     esi, [esp+28]\n"
        "mov     eax, [esp+16]\n"
        "mov     edx, [esp+32]\n"
        "mov     ecx, [esp+20]\n"
        "sub     eax, esi\n"
        "sbb     ecx, edx\n"
        "mov     edx, .O001\n"
        "inc     dword ptr [edx+4]\n"
        "mov     edx, .O001\n"
        "mov     ebx, [edx+8]\n"
        "add     edx, 8\n"
        "add     ebx, eax\n"
        "mov     [edx], ebx\n"
        "adc     [edx+4], ecx\n"
        "mov     edx, [esp+36]\n"
        "mov     .O001, edx\n"
        "mov     esi, [edx+16]\n"
        "add     esi, eax\n"
        "pop     edi\n"
        "mov     [edx+16], esi\n"
        "mov     eax, [edx+20]\n"
        "pop     esi\n"
        "adc     eax, ecx\n"
        "pop     ebp\n"
        "mov     [edx+20], eax\n"
        "pop     ebx\n"
        "add     esp, 56\n"
        "jmp     .L01499\n"

        ".L01499:\n"

        "ret     0\n");

__asm__("asm_0x5004d140:\n"

        "push    ebx\n"
        "push    esi\n"
        "mov     esi, [esp+12]\n"
        "mov     ax, [esi+2]\n"
        "cmp     [esi], ax\n"
        "push    edi\n"
        "jb      short .L0602\n"
        "cmp     ax, [esi+8]\n"
        "jb      short .L0601\n"
        "push    esi\n"
        "call    asm_0x5004d3a0\n"
        "add     esp, 4\n"

        ".L0601:\n"
        "push    esi\n"
        "call    asm_0x5004d090\n"
        "movzx   ecx, word ptr [esi+12]\n"
        "mov     eax, 49152\n"
        "mov     [esi+ecx*2+84], ax\n"
        "movzx   edx, word ptr [esi+12]\n"
        "mov     [esi+edx*2+86], ax\n"
        "movzx   ecx, word ptr [esi+12]\n"
        "mov     [esi+ecx*2+88], ax\n"
        "movzx   edx, word ptr [esi+12]\n"
        "mov     [esi+edx*2+90], ax\n"
        "movzx   ecx, word ptr [esi+12]\n"
        "mov     [esi+ecx*2+92], ax\n"
        "movzx   edx, word ptr [esi+12]\n"
        "push    edx\n"
        "lea     eax, [esi+24]\n"
        "push    eax\n"
        "call    asm_0x5004d4b0\n"
        "add     esp, 12\n"

        ".L0602:\n"
        "mov     ebx, [esp+20]\n"
        "push    16384\n"
        "push    14\n"
        "push    ebx\n"
        "call    asm_0x50046780\n"
        "mov     edi, [esi+28]\n"
        "mov     ecx, [esi+24]\n"
        "add     esp, 12\n"
        "add     eax, 32768\n"
        "jmp     dword ptr [ecx*4+.L0634]\n"

        ".L0603:\n"
        "cmp     [esi+edi*2+80], ax\n"
        "mov     ecx, [esi+36]\n"
        "jbe     short .L0604\n"
        "sub     edi, ecx\n"
        "jmp     short .L0605\n"

        ".L0604:\n"
        "add     edi, ecx\n"

        ".L0605:\n"
        "cmp     [esi+edi*2+80], ax\n"
        "mov     ecx, [esi+40]\n"
        "jbe     short .L0606\n"
        "sub     edi, ecx\n"
        "jmp     short .L0607\n"

        ".L0606:\n"
        "add     edi, ecx\n"

        ".L0607:\n"
        "cmp     [esi+edi*2+80], ax\n"
        "mov     ecx, [esi+44]\n"
        "jbe     short .L0608\n"
        "sub     edi, ecx\n"
        "jmp     short .L0609\n"

        ".L0608:\n"
        "add     edi, ecx\n"

        ".L0609:\n"
        "cmp     [esi+edi*2+80], ax\n"
        "mov     ecx, [esi+48]\n"
        "jbe     short .L0610\n"
        "sub     edi, ecx\n"
        "jmp     short .L0611\n"

        ".L0610:\n"
        "add     edi, ecx\n"

        ".L0611:\n"
        "cmp     [esi+edi*2+80], ax\n"
        "mov     ecx, [esi+52]\n"
        "jbe     short .L0612\n"
        "sub     edi, ecx\n"
        "jmp     short .L0613\n"

        ".L0612:\n"
        "add     edi, ecx\n"

        ".L0613:\n"
        "cmp     [esi+edi*2+80], ax\n"
        "mov     ecx, [esi+56]\n"
        "jbe     short .L0614\n"
        "sub     edi, ecx\n"
        "jmp     short .L0615\n"

        ".L0614:\n"
        "add     edi, ecx\n"

        ".L0615:\n"
        "cmp     [esi+edi*2+80], ax\n"
        "mov     ecx, [esi+60]\n"
        "jbe     short .L0616\n"
        "sub     edi, ecx\n"
        "jmp     short .L0617\n"

        ".L0616:\n"
        "add     edi, ecx\n"

        ".L0617:\n"
        "cmp     [esi+edi*2+80], ax\n"
        "mov     ecx, [esi+64]\n"
        "jbe     short .L0618\n"
        "sub     edi, ecx\n"
        "jmp     short .L0619\n"

        ".L0618:\n"
        "add     edi, ecx\n"

        ".L0619:\n"
        "cmp     [esi+edi*2+80], ax\n"
        "mov     ecx, [esi+68]\n"
        "jbe     short .L0620\n"
        "sub     edi, ecx\n"
        "jmp     short .L0621\n"

        ".L0620:\n"
        "add     edi, ecx\n"

        ".L0621:\n"
        "cmp     [esi+edi*2+80], ax\n"
        "mov     ecx, [esi+72]\n"
        "jbe     short .L0622\n"
        "sub     edi, ecx\n"
        "jmp     short .L0623\n"

        ".L0622:\n"
        "add     edi, ecx\n"

        ".L0623:\n"
        "cmp     [esi+edi*2+80], ax\n"
        "mov     ecx, [esi+76]\n"
        "jbe     short .L0624\n"
        "sub     edi, ecx\n"
        "jmp     short .L0625\n"

        ".L0624:\n"
        "add     edi, ecx\n"

        ".L0625:\n"
        "cmp     [esi+edi*2+80], ax\n"
        "jbe     short .L0626\n"
        "sub     edi, 2\n"
        "jmp     short .L0627\n"

        ".L0626:\n"
        "add     edi, 2\n"

        ".L0627:\n"
        "cmp     [esi+edi*2+80], ax\n"
        "jbe     short .L0629\n"
        "cmp     [esi+edi*2+78], ax\n"
        "jbe     short .L0628\n"
        "sub     edi, 2\n"
        "jmp     short .L0630\n"

        ".L0628:\n"
        "dec     edi\n"
        "jmp     short .L0630\n"

        ".L0629:\n"
        "cmp     [esi+edi*2+82], ax\n"
        "ja      short .L0630\n"
        "inc     edi\n"

        ".L0630:\n"
        "movzx   eax, word ptr [esi+edi*2+80]\n"
        "movzx   edx, word ptr [esi+edi*2+82]\n"
        "push    16384\n"
        "sub     edx, eax\n"
        "push    edx\n"
        "add     eax, 4294934528\n"
        "push    eax\n"
        "push    ebx\n"
        "call    asm_0x500466e0\n"
        "mov     ecx, [esi+20]\n"
        "lea     eax, [edi+edi]\n"
        "add     ecx, eax\n"
        "add     esp, 16\n"
        "inc     word ptr [ecx]\n"
        "inc     word ptr [esi]\n"
        "test    edi, edi\n"
        "ja      short .L0631\n"
        "mov     dx, [esi+10]\n"
        "cmp     dx, [esi+12]\n"
        "jz      short .L0632\n"
        "push    2\n"
        "push    1\n"
        "push    ebx\n"
        "call    asm_0x500467b0\n"
        "add     esp, 12\n"
        "test    eax, eax\n"
        "jz      short .L0632\n"
        "movzx   eax, word ptr [esi+12]\n"
        "movzx   ecx, word ptr [esi+10]\n"
        "sub     ecx, eax\n"
        "push    ecx\n"
        "push    ebx\n"
        "call    asm_0x50046720\n"
        "movzx   edx, word ptr [esi+12]\n"
        "mov     ecx, [esi+20]\n"
        "lea     eax, [eax+edx+1]\n"
        "add     eax, eax\n"
        "add     word ptr [ecx+eax], 2\n"
        "add     ecx, eax\n"
        "add     esp, 8\n"
        "add     word ptr [esi], 2\n"

        ".L0631:\n"
        "mov     ecx, [esi+16]\n"
        "movzx   eax, word ptr [ecx+eax]\n"
        "pop     edi\n"
        "pop     esi\n"
        "pop     ebx\n"
        "jmp     .L0635\n"

        ".L0632:\n"
        "inc     word ptr [esi+10]\n"
        "movzx   eax, word ptr [esi+10]\n"
        "mov     edx, [esi+20]\n"
        "lea     ecx, [eax+eax]\n"
        "add     word ptr [edx+ecx], 2\n"
        "add     word ptr [esi], 2\n"
        "lea     eax, [edx+ecx]\n"
        "mov     dx, [esi+10]\n"
        "cmp     dx, [esi+14]\n"
        "mov     ax, [esi]\n"
        "jnz     short .L0633\n"
        "mov     edx, [esi+20]\n"
        "sub     ax, [edx]\n"
        "mov     [esi], ax\n"
        "mov     word ptr [edx], 0\n"

        ".L0633:\n"
        "mov     eax, [esi+16]\n"
        "pop     edi\n"
        "pop     esi\n"
        "add     eax, ecx\n"
        "pop     ebx\n"
        "jmp     .L0635\n"

        ".align 16\n"
        ".L0634:\n"
        ".long .L0625\n"
        ".long .L0623\n"
        ".long .L0621\n"
        ".long .L0619\n"
        ".long .L0617\n"
        ".long .L0615\n"
        ".long .L0613\n"
        ".long .L0611\n"
        ".long .L0609\n"
        ".long .L0607\n"
        ".long .L0605\n"
        ".long .L0603\n"

        ".L0635:\n"

        "ret    0\n");
