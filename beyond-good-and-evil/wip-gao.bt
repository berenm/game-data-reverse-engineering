// Beyond Good and Evil

#include <bge.bti>

LittleEndian();

uint32 size <bgcolor=cLtBlue>;
Magic  type(4, ".gao");

local uint64 begin = FTell();

uint16 unknown <format=hex>;
Assert(unknown == 0x00 ||
       unknown == 0x08 ||
       unknown == 0x09 ||
       unknown == 0x00 ||
       unknown == 0x40 ||
       unknown == 0x48);
uint16 unknown <format=hex>;
Assert(unknown == 0x00 ||
       unknown == 0x00 ||
       unknown == 0x00 ||
       unknown == 0x00 ||
       unknown == 0x01 ||
       unknown == 0x01 ||
       unknown == 0x10);

uint32 unknown <format=hex>;
uint16 unknown <format=hex>;
uint16 unknown <format=hex>;
uint16 unknown <format=hex>;
uint16 unknown <format=hex>;
uint16 unknown <format=hex>;
Matrix unknown(4, 4);

uint32 unknown <format=hex>;
Assert(unknown == 0x0 ||
       unknown == 0x2 ||
       unknown == 0x4 ||
       unknown == 0x6 ||
       unknown == 0xa ||
       unknown == 0xe);

struct {
switch (unknown[2]) {
default: byte unknown[size-90] <fgcolor=cRed>;
case 0x2080:
  Matrix unknown(3, 2);
  ResId  unknown;
  uint32 unknown;
  ResId  unknown;
  uint32 unknown;
  uint16 unknown;
  uint32 unknown;
  break;
case 0x20a0:
  Matrix unknown(3, 2);
  ResId  unknown;
  Fixed32 unknown(0);
  ResId  unknown;
  Fixed32 unknown(0);
  uint16 unknown;
  Fixed32 unknown(127);
  ResId  unknown;
  break;
case 0x5080:
  Matrix      unknown(3, 2);
  ResId       unknown;
  ResId       unknown;
  uint32      unknown;
  uint32      unknown;
  UInt32Array unknown;
  break;
case 0x70a0:
  Matrix      unknown(3, 2);
  ResId       unknown;
  ResId       unknown;
  uint32      unknown;
  uint32      unknown;
  UInt32Array unknown;
  ResId       unknown;
  uint16      unknown;
  uint32      unknown;
  uint32      unknown;
  uint32      unknown;
  uint32      unknown;
  float       unknown;
  uint32      unknown;
  uint32      unknown;
  uint32      unknown;
  uint32      unknown;
  uint32      unknown;
  uint32      unknown;
  Matrix      unknown(3, 2);
  uint32      unknown;
  uint32      unknown;
  uint32      unknown;
  uint32      unknown;
  uint32      unknown;
  uint32      unknown;
  uint32      unknown;

  Matrix      unknown(3, 2);
  ResId       unknown;
  Matrix      unknown(3, 2);
  ResId       unknown;
  uint32      unknown;
  uint32      unknown;
  ResId       unknown;
  break;
case 0x15000:
  Matrix      unknown(3, 2);
  ResId       unknown;
  ResId       unknown;
  uint32      unknown;
  uint32      unknown;
  UInt32Array unknown;
  break;
case 0x403010:
  Matrix unknown(3, 2);
  ResId  unknown;
  Matrix unknown(4, 4);
  ResId  unknown;
  ResId  unknown;
  uint32 unknown;
  uint32 unknown;
  uint16 unknown;
  uint32 unknown;
  uint32 unknown;
  ResId  unknown;
  break;
case 0x405000:
case 0x415000:
  Matrix      unknown(3, 2);
  ResId       unknown;
  ResId       unknown;
  uint32      unknown;
  uint32      unknown;
  UInt32Array unknown;
  ResId       unknown;
  Matrix      unknown(4, 4);
  uint32      unknown;
  break;
case 0x485000:
  Matrix      unknown(3, 4);
  ResId       unknown;
  ResId       unknown;
  uint32      unknown;
  uint32      unknown;
  UInt32Array unknown;
  ResId       unknown;
  Matrix      unknown(4, 4);
  uint32      unknown;
  break;
case 0x95000:
  Matrix      unknown(3, 4);
  ResId       unknown;
  ResId       unknown;
  uint32      unknown;
  uint32      unknown;
  UInt32Array unknown;
  break;
case 0x97000:
case 0x97020:
  Matrix      unknown(3, 4);
  ResId       unknown;
  ResId       unknown;
  uint32      unknown;
  uint32      unknown;
  UInt32Array unknown;
  ResId       unknown;
  uint16      unknown;
  uint32      unknown;
  uint32      unknown;
  uint32      unknown;
  uint32      unknown;
  uint32      unknown;
  uint32      unknown;
  uint32      unknown;
  uint32      unknown;
  uint32      unknown;
  uint32      unknown;
  uint32      unknown;
local uint32 size = unknown[17];
  // GaoHeaderChunk unknown[size] <optimize=false>;
  uint32 u006;
  float  u006;
  float  u006;
  uint32 u006;
  uint32 u006;
  uint32 u006;
  uint32 u006;
  uint32 u006;
  uint32 u006;
  uint32 u006;
  float  u006;
  float  u006;
  uint32 u006;
  uint32 u006;
  float  u006;
  float  u006;
  uint32 u006;
  uint32 u006;
  float  u006;
  float  u006;
  uint32 u006;
  uint32 u006;
  float  u006;
  float  u006;
  uint32 u006;
  uint32 u006;
  float  u006;
  float  u006;
  uint32 u006;
  uint32 u006;
  float  u006;
  float  u006;
  uint32 u006;
  uint32 u006;
  float  u006;
  float  u006;
  uint32 u006;
  uint32 u006;
  float  u006;
  float  u006;
  uint32 u006;
  uint32 u006;
  float  u006;
  float  u006;
  uint32 u006;
  uint32 u006;
  float  u006;
  float  u006;
  uint32 u006;
  uint32 u006;
  float  u006;
  float  u006;
  uint32 u006;
  uint32 u006;
  uint32 u006;
  uint32 u006;
  float  u006;
  float  u006;
  uint32 u006;
  uint32 u006;
  float  u006;
  float  u006;
  uint32 u006;
  uint32 u006;
  float  u006;
  float  u006;
  uint32 u006;
  ResId  u007;
  break;
}
} custom;

SizedString name;