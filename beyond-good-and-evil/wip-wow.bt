// Beyond Good and Evil

#include <bge.bti>

LittleEndian();

typedef struct (string magic) {
  ResId  id;
  Magic  type(4, magic);
} WowEntry <bgcolor=cLtYellow, read=ReadWowEntry>;
string ReadWowEntry(WowEntry& entry) { string out; SPrintf(out, "%08Xh%s", entry.id.data, entry.type.data); return out; }

struct WowList {
  uint32 size <bgcolor=cLtBlue>;

  local uint32 i;
  for (i = 0; i < size; i += 8)
    WowEntry wow(".wow");
};

struct GaoList {
  uint32 size <bgcolor=cLtBlue>;

  local uint32 i;
  for (i = 0; i < size; i += 4)
    ResId id;
};

struct ResTypeList {
  uint32 size <bgcolor=cLtBlue>;

  local uint32 i;
  for (i = 0; i < size; i += 8) {
    ResId        id;
    PaddedString type(4);
  }
};

struct ResList {
  uint32 size <bgcolor=cLtBlue>;
  byte   data[size];
};

typedef struct {
  uint32 count;
  uint32 u000[count];
  float  u001[count*3];
} GaoHeaderChunk <bgcolor=cLtGray>;

struct GaoHeader {
  uint32 size <bgcolor=cLtBlue>;
  local int64 end = FTell() + size;
  Magic  type(4, ".gao");

  uint16 unknown <format=hex>;
  Assert(unknown == 0x00 ||
         unknown == 0x08 ||
         unknown == 0x09 ||
         unknown == 0x00 ||
         unknown == 0x40 ||
         unknown == 0x48 ||
         unknown == 0x2000);
  uint16 unknown <format=hex>;
  Assert(unknown == 0x00 ||
         unknown == 0x00 ||
         unknown == 0x00 ||
         unknown == 0x00 ||
         unknown == 0x01 ||
         unknown == 0x01 ||
         unknown == 0x10);
  
  uint32 unknown <format=hex>;
  uint16 unknown <format=hex>;
  uint16 unknown <format=hex>;
  uint16 unknown <format=hex>;
  uint16 unknown <format=hex>;
  uint16 unknown <format=hex>;
  Matrix unknown(4, 4);
  
  uint32 unknown <format=hex>;
  Assert(unknown == 0x0 ||
         unknown == 0x2 ||
         unknown == 0x4 ||
         unknown == 0x6 ||
         unknown == 0xa ||
         unknown == 0xe);

  Matrix unknown(3, 2);

/*
  if ((unknown[2] & 0xff000) == 0x97000) {
    Matrix unknown(6, 1);
    if (unknown[2] == 0x97920) {
      uint32 unknown;
      uint32 unknown;
      uint32 unknown;
      uint32 unknown;
      uint32 size;
      uint32 values[size];
      uint32 unknown;
      uint32 unknown;
      if (unknown == 1)
        byte _[62];
      else
        byte _[22];
      SizedString name;
    } else {
      byte _[42];
      SizedString name;
    }
  } else if (unknown[2] == 0x80) {
    SizedString name;
  } else if (unknown[4] == 0x2020) {
    Matrix unknown(6, 1);
    byte _[size-90-6*4];
    SizedString name;
  } else {
  }

  uint32 unknown;
  Assert(unknown == 0xffffffff);
*/
  local uint32 footer = 4;
  while (ReadUInt(end - footer) != footer - 4)
    footer++;

  byte _[size-90-6*4-footer];
  SizedString name;

Printf("%04x %08x %s\n", size-90-6*4-footer, unknown[2], name.value);
};

struct WowHeader {
  uint32  size <bgcolor=cLtBlue>; Assert(size == 180);
  Magic   type(4, ".wow"); // verified
  Fixed32 version(3);      // verified

  uint32  unknown; // something to do with memory alloc
  Assert(unknown == 0 ||
         unknown == 1);
  uint32  unknown;
 
  PaddedString name(60);   // verified
  Matrix  rotate(4, 3);    // verified
  Matrix  translate(3, 1); // verified
  float   scale;           // verified
  uint32  unknown <fgcolor=cRed>;

  float   unknown <fgcolor=cRed>;
  uint32  unknown <fgcolor=cRed>;
  uint32  unknown <fgcolor=cRed>;
  uint32  unknown <fgcolor=cRed>;

  ResId   resid;
  ResId   resid;
  ResId   resid;
  ResId   resid;
  ResId   resid;

  if (resid[0].data != 0x00000000 && resid[0].data != 0xffffffff)
    ResList list3;
  if (resid[1].data != 0x00000000 && resid[0].data != 0xffffffff)
    ResList list3;

  if (resid[3].data != 0)
    GaoList list0;
  GaoList list;

  if (resid[0].data != 0x00000000 && resid[0].data != 0xffffffff)
    ResList list3;
  if (resid[1].data != 0x00000000 && resid[0].data != 0xffffffff)
    ResList list3;

  if (resid[3].data != 0)
    GaoHeader gao0[list0.size / 4] <optimize=false, fgcolor=cLtGray>;
  GaoHeader gao[list.size / 4] <optimize=false, fgcolor=cLtGray>;
};

struct SizesChunk {
  uint32 size;
  uint32 sizes[size / 4];
};

WowHeader wow;

GaoList list;
Chunk unknown;
Chunk unknown;

ResTypeList list;
Chunk unknown;
Chunk unknown;
Chunk unknown;
Chunk unknown;