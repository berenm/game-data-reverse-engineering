// Beyond Good and Evil

#include <bge.bti>

LittleEndian();

typedef struct (string magic) {
  ResId  id;
  Magic  type(4, magic);
} WowEntry <bgcolor=cLtYellow, read=ReadWowEntry>;
string ReadWowEntry(WowEntry& entry) { string out; SPrintf(out, "%08Xh%s", entry.id.data, entry.type.data); return out; }

struct WowList {
  uint32 size <bgcolor=cLtBlue>;

  local uint32 i;
  for (i = 0; i < size; i += 8)
    WowEntry wow(".wow");
};

struct GaoList {
  uint32 size <bgcolor=cLtBlue>;

  local uint32 i;
  for (i = 0; i < size; i += 4)
    ResId id;
};

typedef struct {
  uint32 count;
  uint32 u000[count];
  float  u001[count*3];
} GaoHeaderChunk <bgcolor=cLtGray>;

struct GaoHeader {
  uint32 size <bgcolor=cLtBlue>;
  Magic  type(4, ".gao");

local uint64 begin = FTell();

uint16 unknown <format=hex>;
Assert(unknown == 0x00 ||
       unknown == 0x08 ||
       unknown == 0x09 ||
       unknown == 0x00 ||
       unknown == 0x40 ||
       unknown == 0x48);
uint16 unknown <format=hex>;
Assert(unknown == 0x00 ||
       unknown == 0x00 ||
       unknown == 0x00 ||
       unknown == 0x00 ||
       unknown == 0x01 ||
       unknown == 0x01 ||
       unknown == 0x10);

uint32 unknown <format=hex>;
uint16 unknown <format=hex>;
uint16 unknown <format=hex>;
uint16 unknown <format=hex>;
uint16 unknown <format=hex>;
uint16 unknown <format=hex>;
Matrix unknown(4, 4);

uint32 unknown <format=hex>;
Assert(unknown == 0x0 ||
       unknown == 0x2 ||
       unknown == 0x4 ||
       unknown == 0x6 ||
       unknown == 0xa ||
       unknown == 0xe);

struct {
switch (unknown[2]) {
default: byte unknown[size-90] <fgcolor=cRed>;
case 0x2080:
  Matrix unknown(3, 2);
  ResId  unknown;
  uint32 unknown;
  ResId  unknown;
  uint32 unknown;
  uint16 unknown;
  uint32 unknown;
  break;
case 0x20a0:
  Matrix unknown(3, 2);
  ResId  unknown;
  Fixed32 unknown(0);
  ResId  unknown;
  Fixed32 unknown(0);
  uint16 unknown;
  Fixed32 unknown(127);
  ResId  unknown;
  break;
case 0x5080:
  Matrix      unknown(3, 2);
  ResId       unknown;
  ResId       unknown;
  uint32      unknown;
  uint32      unknown;
  UInt32Array unknown;
  break;
case 0x70a0:
  Matrix      unknown(3, 2);
  ResId       unknown;
  ResId       unknown;
  uint32      unknown;
  uint32      unknown;
  UInt32Array unknown;
  ResId       unknown;
  uint16      unknown;
  uint32      unknown;
  uint32      unknown;
  uint32      unknown;
  uint32      unknown;
  float       unknown;
  uint32      unknown;
  uint32      unknown;
  uint32      unknown;
  uint32      unknown;
  uint32      unknown;
  uint32      unknown;
  Matrix      unknown(3, 2);
  uint32      unknown;
  uint32      unknown;
  uint32      unknown;
  uint32      unknown;
  uint32      unknown;
  uint32      unknown;
  uint32      unknown;

  Matrix      unknown(3, 2);
  ResId       unknown;
  Matrix      unknown(3, 2);
  ResId       unknown;
  uint32      unknown;
  uint32      unknown;
  ResId       unknown;
  break;
case 0x15000:
  Matrix      unknown(3, 2);
  ResId       unknown;
  ResId       unknown;
  uint32      unknown;
  uint32      unknown;
  UInt32Array unknown;
  break;
case 0x403010:
  Matrix unknown(3, 2);
  ResId  unknown;
  Matrix unknown(4, 4);
  ResId  unknown;
  ResId  unknown;
  uint32 unknown;
  uint32 unknown;
  uint16 unknown;
  uint32 unknown;
  uint32 unknown;
  ResId  unknown;
  break;
case 0x405000:
case 0x415000:
  Matrix      unknown(3, 2);
  ResId       unknown;
  ResId       unknown;
  uint32      unknown;
  uint32      unknown;
  UInt32Array unknown;
  ResId       unknown;
  Matrix      unknown(4, 4);
  uint32      unknown;
  break;
case 0x485000:
  Matrix      unknown(3, 4);
  ResId       unknown;
  ResId       unknown;
  uint32      unknown;
  uint32      unknown;
  UInt32Array unknown;
  ResId       unknown;
  Matrix      unknown(4, 4);
  uint32      unknown;
  break;
case 0x95000:
  Matrix      unknown(3, 4);
  ResId       unknown;
  ResId       unknown;
  uint32      unknown;
  uint32      unknown;
  UInt32Array unknown;
  break;
case 0x97000:
case 0x97020:
  Matrix      unknown(3, 4);
  ResId       unknown;
  ResId       unknown;
  uint32      unknown;
  uint32      unknown;
  UInt32Array unknown;
  ResId       unknown;
  uint16      unknown;
  uint32      unknown;
  uint32      unknown;
  uint32      unknown;
  uint32      unknown;
  uint32      unknown;
  uint32      unknown;
  uint32      unknown;
  uint32      unknown;
  uint32      unknown;
  uint32      unknown;
  uint32      unknown;
  GaoHeaderChunk unknown[unknown[17]] <optimize=false>;
  uint32 u006;
  float  u006;
  float  u006;
  uint32 u006;
  uint32 u006;
  uint32 u006;
  uint32 u006;
  uint32 u006;
  uint32 u006;
  uint32 u006;
  float  u006;
  float  u006;
  uint32 u006;
  uint32 u006;
  float  u006;
  float  u006;
  uint32 u006;
  uint32 u006;
  float  u006;
  float  u006;
  uint32 u006;
  uint32 u006;
  float  u006;
  float  u006;
  uint32 u006;
  uint32 u006;
  float  u006;
  float  u006;
  uint32 u006;
  uint32 u006;
  float  u006;
  float  u006;
  uint32 u006;
  uint32 u006;
  float  u006;
  float  u006;
  uint32 u006;
  uint32 u006;
  float  u006;
  float  u006;
  uint32 u006;
  uint32 u006;
  float  u006;
  float  u006;
  uint32 u006;
  uint32 u006;
  float  u006;
  float  u006;
  uint32 u006;
  uint32 u006;
  float  u006;
  float  u006;
  uint32 u006;
  uint32 u006;
  uint32 u006;
  uint32 u006;
  float  u006;
  float  u006;
  uint32 u006;
  uint32 u006;
  float  u006;
  float  u006;
  uint32 u006;
  uint32 u006;
  float  u006;
  float  u006;
  uint32 u006;
  ResId  u007;
  break;
}
} custom;

//  SizedString name;

FSeek(begin + size - 4);
};

struct WowHeader {
  uint32  size <bgcolor=cLtBlue>; Assert(size == 180);
  Magic   type(4, ".wow");

  Fixed32 unknown(3);
  uint32  unknown;
  Assert(unknown == 0 ||
         unknown == 1);
  uint32  unknown;
 
  PaddedString name(60);

  Matrix  unknown(4, 4);
  Fixed32 unknown(6);
  float   unknown <bgcolor=cGray>;
  uint32  unknown <bgcolor=cGray>;
  uint32  unknown <bgcolor=cGray>;
  uint32  unknown <bgcolor=cGray>;

  ResId   unknown;
  ResId   unknown;
  ResId   unknown;

  ResId unknown;
  ResId unknown;
  if (unknown[12].data != 0)
    GaoList list0;
  GaoList list;
  if (unknown[12].data != 0)
    GaoHeader gao0[list0.size / 4] <optimize=false>;
  GaoHeader gao[list.size / 4] <optimize=false>;
};

struct SizesChunk {
  uint32 size;
  uint32 sizes[size / 4];
};

local uint32 j;
while (!FEof()) {
  WowList list;
  for (j = 0; j < list.size; j += 8) {
    WowHeader wow;
    SizesChunk unknown;
    SizesChunk unknown[4] <optimize=false>;
  }
}